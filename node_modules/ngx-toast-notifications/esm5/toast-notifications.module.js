/**
 * @fileoverview added by tsickle
 * Generated from: toast-notifications.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule, Optional, SkipSelf } from '@angular/core';
import { CommonModule } from '@angular/common';
import { TOAST_NOTIFICATIONS_CONFIG } from './toast-notifications.config';
import { ToastContainerComponent } from './toast-container/toast-container.component';
import { BasicToastContentComponent } from './toast-content/basic-toast-content.component';
import { ToastContentDirective } from './toast-content/toast-content.directive';
import { Toaster } from './toaster';
import { ToastContainerService } from './toast-container.service';
var ɵ0 = {};
var ToastNotificationsModule = /** @class */ (function () {
    function ToastNotificationsModule(parentModule) {
        if (parentModule) {
            throw new Error('ToastNotificationsModule is already loaded. Import it in the root module only');
        }
    }
    /**
     * @param {?=} config
     * @return {?}
     */
    ToastNotificationsModule.forRoot = /**
     * @param {?=} config
     * @return {?}
     */
    function (config) {
        if (config === void 0) { config = {}; }
        return {
            ngModule: ToastNotificationsModule,
            providers: [
                { provide: TOAST_NOTIFICATIONS_CONFIG, useValue: config },
            ]
        };
    };
    ToastNotificationsModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                    ],
                    declarations: [
                        ToastContainerComponent,
                        BasicToastContentComponent,
                        ToastContentDirective,
                    ],
                    entryComponents: [
                        ToastContainerComponent,
                        BasicToastContentComponent,
                    ],
                    providers: [
                        Toaster,
                        ToastContainerService,
                        { provide: TOAST_NOTIFICATIONS_CONFIG, useValue: ɵ0 },
                    ],
                },] }
    ];
    /** @nocollapse */
    ToastNotificationsModule.ctorParameters = function () { return [
        { type: ToastNotificationsModule, decorators: [{ type: Optional }, { type: SkipSelf }] }
    ]; };
    return ToastNotificationsModule;
}());
export { ToastNotificationsModule };
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9hc3Qtbm90aWZpY2F0aW9ucy5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtdG9hc3Qtbm90aWZpY2F0aW9ucy8iLCJzb3VyY2VzIjpbInRvYXN0LW5vdGlmaWNhdGlvbnMubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUF1QixRQUFRLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNsRixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLDBCQUEwQixFQUE0QixNQUFNLDhCQUE4QixDQUFDO0FBQ3BHLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDZDQUE2QyxDQUFDO0FBQ3RGLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLCtDQUErQyxDQUFDO0FBQzNGLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHlDQUF5QyxDQUFDO0FBQ2hGLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDcEMsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7U0FrQmQsRUFBRTtBQWhCdEQ7SUFxQkUsa0NBQW9DLFlBQXNDO1FBQ3hFLElBQUksWUFBWSxFQUFFO1lBQ2hCLE1BQU0sSUFBSSxLQUFLLENBQUMsK0VBQStFLENBQUMsQ0FBQztTQUNsRztJQUNILENBQUM7Ozs7O0lBRU0sZ0NBQU87Ozs7SUFBZCxVQUFlLE1BQXFDO1FBQXJDLHVCQUFBLEVBQUEsV0FBcUM7UUFDbEQsT0FBTztZQUNMLFFBQVEsRUFBRSx3QkFBd0I7WUFDbEMsU0FBUyxFQUFFO2dCQUNULEVBQUMsT0FBTyxFQUFFLDBCQUEwQixFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUM7YUFDeEQ7U0FDRixDQUFDO0lBQ0osQ0FBQzs7Z0JBbENGLFFBQVEsU0FBQztvQkFDUixPQUFPLEVBQUU7d0JBQ1AsWUFBWTtxQkFDYjtvQkFDRCxZQUFZLEVBQUU7d0JBQ1osdUJBQXVCO3dCQUN2QiwwQkFBMEI7d0JBQzFCLHFCQUFxQjtxQkFDdEI7b0JBQ0QsZUFBZSxFQUFFO3dCQUNmLHVCQUF1Qjt3QkFDdkIsMEJBQTBCO3FCQUMzQjtvQkFDRCxTQUFTLEVBQUU7d0JBQ1QsT0FBTzt3QkFDUCxxQkFBcUI7d0JBQ3JCLEVBQUMsT0FBTyxFQUFFLDBCQUEwQixFQUFFLFFBQVEsSUFBSSxFQUFDO3FCQUNwRDtpQkFDRjs7OztnQkFHbUQsd0JBQXdCLHVCQUE3RCxRQUFRLFlBQUksUUFBUTs7SUFjbkMsK0JBQUM7Q0FBQSxBQW5DRCxJQW1DQztTQWhCWSx3QkFBd0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNb2R1bGVXaXRoUHJvdmlkZXJzLCBOZ01vZHVsZSwgT3B0aW9uYWwsIFNraXBTZWxmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XHJcbmltcG9ydCB7IFRPQVNUX05PVElGSUNBVElPTlNfQ09ORklHLCBUb2FzdE5vdGlmaWNhdGlvbnNDb25maWcgfSBmcm9tICcuL3RvYXN0LW5vdGlmaWNhdGlvbnMuY29uZmlnJztcclxuaW1wb3J0IHsgVG9hc3RDb250YWluZXJDb21wb25lbnQgfSBmcm9tICcuL3RvYXN0LWNvbnRhaW5lci90b2FzdC1jb250YWluZXIuY29tcG9uZW50JztcclxuaW1wb3J0IHsgQmFzaWNUb2FzdENvbnRlbnRDb21wb25lbnQgfSBmcm9tICcuL3RvYXN0LWNvbnRlbnQvYmFzaWMtdG9hc3QtY29udGVudC5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBUb2FzdENvbnRlbnREaXJlY3RpdmUgfSBmcm9tICcuL3RvYXN0LWNvbnRlbnQvdG9hc3QtY29udGVudC5kaXJlY3RpdmUnO1xyXG5pbXBvcnQgeyBUb2FzdGVyIH0gZnJvbSAnLi90b2FzdGVyJztcclxuaW1wb3J0IHsgVG9hc3RDb250YWluZXJTZXJ2aWNlIH0gZnJvbSAnLi90b2FzdC1jb250YWluZXIuc2VydmljZSc7XHJcblxyXG5ATmdNb2R1bGUoe1xyXG4gIGltcG9ydHM6IFtcclxuICAgIENvbW1vbk1vZHVsZSxcclxuICBdLFxyXG4gIGRlY2xhcmF0aW9uczogW1xyXG4gICAgVG9hc3RDb250YWluZXJDb21wb25lbnQsXHJcbiAgICBCYXNpY1RvYXN0Q29udGVudENvbXBvbmVudCxcclxuICAgIFRvYXN0Q29udGVudERpcmVjdGl2ZSxcclxuICBdLFxyXG4gIGVudHJ5Q29tcG9uZW50czogW1xyXG4gICAgVG9hc3RDb250YWluZXJDb21wb25lbnQsXHJcbiAgICBCYXNpY1RvYXN0Q29udGVudENvbXBvbmVudCxcclxuICBdLFxyXG4gIHByb3ZpZGVyczogW1xyXG4gICAgVG9hc3RlcixcclxuICAgIFRvYXN0Q29udGFpbmVyU2VydmljZSxcclxuICAgIHtwcm92aWRlOiBUT0FTVF9OT1RJRklDQVRJT05TX0NPTkZJRywgdXNlVmFsdWU6IHt9fSxcclxuICBdLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgVG9hc3ROb3RpZmljYXRpb25zTW9kdWxlIHtcclxuXHJcbiAgY29uc3RydWN0b3IoQE9wdGlvbmFsKCkgQFNraXBTZWxmKCkgcGFyZW50TW9kdWxlOiBUb2FzdE5vdGlmaWNhdGlvbnNNb2R1bGUpIHtcclxuICAgIGlmIChwYXJlbnRNb2R1bGUpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdUb2FzdE5vdGlmaWNhdGlvbnNNb2R1bGUgaXMgYWxyZWFkeSBsb2FkZWQuIEltcG9ydCBpdCBpbiB0aGUgcm9vdCBtb2R1bGUgb25seScpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc3RhdGljIGZvclJvb3QoY29uZmlnOiBUb2FzdE5vdGlmaWNhdGlvbnNDb25maWcgPSB7fSk6IE1vZHVsZVdpdGhQcm92aWRlcnMge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgbmdNb2R1bGU6IFRvYXN0Tm90aWZpY2F0aW9uc01vZHVsZSxcclxuICAgICAgcHJvdmlkZXJzOiBbXHJcbiAgICAgICAge3Byb3ZpZGU6IFRPQVNUX05PVElGSUNBVElPTlNfQ09ORklHLCB1c2VWYWx1ZTogY29uZmlnfSxcclxuICAgICAgXVxyXG4gICAgfTtcclxuICB9XHJcbn1cclxuIl19