/**
 * @fileoverview added by tsickle
 * Generated from: core/toast-notification-core.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule, Optional, SkipSelf } from '@angular/core';
import { ToastNotifications } from './toast-natifications';
import { TOAST_NOTIFICATIONS_CONFIG } from '../toast-notifications.config';
import { ToastNotificationsModule } from '../toast-notifications.module';
/** @type {?} */
var defaultConfig = { lifetime: 8000 };
var ToastNotificationCoreModule = /** @class */ (function () {
    function ToastNotificationCoreModule(parentModule) {
        if (parentModule) {
            throw new Error('ToastNotificationCoreModule is already loaded. Import it in the root module only');
        }
    }
    /**
     * @param {?=} config
     * @return {?}
     */
    ToastNotificationCoreModule.forRoot = /**
     * @param {?=} config
     * @return {?}
     */
    function (config) {
        if (config === void 0) { config = defaultConfig; }
        return {
            ngModule: ToastNotificationCoreModule,
            providers: [
                { provide: TOAST_NOTIFICATIONS_CONFIG, useValue: { duration: config.duration || config.lifetime } }
            ]
        };
    };
    ToastNotificationCoreModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        ToastNotificationsModule,
                    ],
                    providers: [
                        ToastNotifications,
                    ],
                },] }
    ];
    /** @nocollapse */
    ToastNotificationCoreModule.ctorParameters = function () { return [
        { type: ToastNotificationCoreModule, decorators: [{ type: Optional }, { type: SkipSelf }] }
    ]; };
    return ToastNotificationCoreModule;
}());
export { ToastNotificationCoreModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9hc3Qtbm90aWZpY2F0aW9uLWNvcmUubW9kdWxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LXRvYXN0LW5vdGlmaWNhdGlvbnMvIiwic291cmNlcyI6WyJjb3JlL3RvYXN0LW5vdGlmaWNhdGlvbi1jb3JlLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBdUIsUUFBUSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbEYsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDM0QsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDM0UsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sK0JBQStCLENBQUM7O0lBRW5FLGFBQWEsR0FBMkMsRUFBQyxRQUFRLEVBQUUsSUFBSSxFQUFDO0FBRTlFO0lBYUUscUNBQW9DLFlBQXlDO1FBQzNFLElBQUksWUFBWSxFQUFFO1lBQ2hCLE1BQU0sSUFBSSxLQUFLLENBQUMsa0ZBQWtGLENBQUMsQ0FBQztTQUNyRztJQUNILENBQUM7Ozs7O0lBRU0sbUNBQU87Ozs7SUFBZCxVQUFlLE1BQXNCO1FBQXRCLHVCQUFBLEVBQUEsc0JBQXNCO1FBQ25DLE9BQU87WUFDTCxRQUFRLEVBQUUsMkJBQTJCO1lBQ3JDLFNBQVMsRUFBRTtnQkFDVCxFQUFDLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxRQUFRLEVBQUUsRUFBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLFFBQVEsSUFBSSxNQUFNLENBQUMsUUFBUSxFQUFDLEVBQUM7YUFDaEc7U0FDRixDQUFDO0lBQ0osQ0FBQzs7Z0JBMUJGLFFBQVEsU0FBQztvQkFDUixPQUFPLEVBQUU7d0JBQ1Asd0JBQXdCO3FCQUN6QjtvQkFDRCxTQUFTLEVBQUU7d0JBQ1Qsa0JBQWtCO3FCQUNuQjtpQkFDRjs7OztnQkFNbUQsMkJBQTJCLHVCQUFoRSxRQUFRLFlBQUksUUFBUTs7SUFjbkMsa0NBQUM7Q0FBQSxBQTNCRCxJQTJCQztTQWhCWSwyQkFBMkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNb2R1bGVXaXRoUHJvdmlkZXJzLCBOZ01vZHVsZSwgT3B0aW9uYWwsIFNraXBTZWxmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFRvYXN0Tm90aWZpY2F0aW9ucyB9IGZyb20gJy4vdG9hc3QtbmF0aWZpY2F0aW9ucyc7XHJcbmltcG9ydCB7IFRPQVNUX05PVElGSUNBVElPTlNfQ09ORklHIH0gZnJvbSAnLi4vdG9hc3Qtbm90aWZpY2F0aW9ucy5jb25maWcnO1xyXG5pbXBvcnQgeyBUb2FzdE5vdGlmaWNhdGlvbnNNb2R1bGUgfSBmcm9tICcuLi90b2FzdC1ub3RpZmljYXRpb25zLm1vZHVsZSc7XHJcblxyXG5jb25zdCBkZWZhdWx0Q29uZmlnOiB7bGlmZXRpbWU/OiBudW1iZXIsIGR1cmF0aW9uPzogbnVtYmVyfSA9IHtsaWZldGltZTogODAwMH07XHJcblxyXG5ATmdNb2R1bGUoe1xyXG4gIGltcG9ydHM6IFtcclxuICAgIFRvYXN0Tm90aWZpY2F0aW9uc01vZHVsZSxcclxuICBdLFxyXG4gIHByb3ZpZGVyczogW1xyXG4gICAgVG9hc3ROb3RpZmljYXRpb25zLFxyXG4gIF0sXHJcbn0pXHJcbi8qKlxyXG4gKiBAZGVwcmVjYXRlZCBzaW5jZSB2ZXJzaW9uIDEuMC4wIHVzZSBUb2FzdE5vdGlmaWNhdGlvbnNNb2R1bGVcclxuICovXHJcbmV4cG9ydCBjbGFzcyBUb2FzdE5vdGlmaWNhdGlvbkNvcmVNb2R1bGUge1xyXG5cclxuICBjb25zdHJ1Y3RvcihAT3B0aW9uYWwoKSBAU2tpcFNlbGYoKSBwYXJlbnRNb2R1bGU6IFRvYXN0Tm90aWZpY2F0aW9uQ29yZU1vZHVsZSkge1xyXG4gICAgaWYgKHBhcmVudE1vZHVsZSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RvYXN0Tm90aWZpY2F0aW9uQ29yZU1vZHVsZSBpcyBhbHJlYWR5IGxvYWRlZC4gSW1wb3J0IGl0IGluIHRoZSByb290IG1vZHVsZSBvbmx5Jyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZm9yUm9vdChjb25maWcgPSBkZWZhdWx0Q29uZmlnKTogTW9kdWxlV2l0aFByb3ZpZGVycyB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBuZ01vZHVsZTogVG9hc3ROb3RpZmljYXRpb25Db3JlTW9kdWxlLFxyXG4gICAgICBwcm92aWRlcnM6IFtcclxuICAgICAgICB7cHJvdmlkZTogVE9BU1RfTk9USUZJQ0FUSU9OU19DT05GSUcsIHVzZVZhbHVlOiB7ZHVyYXRpb246IGNvbmZpZy5kdXJhdGlvbiB8fCBjb25maWcubGlmZXRpbWV9fVxyXG4gICAgICBdXHJcbiAgICB9O1xyXG4gIH1cclxufVxyXG4iXX0=