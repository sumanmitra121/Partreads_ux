/**
 * @fileoverview added by tsickle
 * Generated from: toaster.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Inject, Injectable, Type } from '@angular/core';
import { ToastContainerService } from './toast-container.service';
import { TOAST_NOTIFICATIONS_CONFIG } from './toast-notifications.config';
import { BasicToastContentComponent } from './toast-content/basic-toast-content.component';
/** @type {?} */
var DEFAULT_CONFIG = {
    autoClose: true,
    duration: 8000,
    type: 'light',
    position: 'bottom-right',
    component: BasicToastContentComponent,
};
var Toaster = /** @class */ (function () {
    function Toaster(_config, _containerService) {
        this._config = _config;
        this._containerService = _containerService;
    }
    /**
     * @param {?} config
     * @param {?=} componentConfig
     * @return {?}
     */
    Toaster.prototype.open = /**
     * @param {?} config
     * @param {?=} componentConfig
     * @return {?}
     */
    function (config, componentConfig) {
        if (typeof config === 'string') {
            config = tslib_1.__assign({ text: (/** @type {?} */ (config)) }, componentConfig);
        }
        if (config instanceof Type) {
            config = tslib_1.__assign({}, componentConfig, { component: (/** @type {?} */ (config)) });
        }
        config = tslib_1.__assign({}, DEFAULT_CONFIG, this._config, config);
        return this._containerService.ref.instance.add(config);
    };
    Toaster.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    Toaster.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [TOAST_NOTIFICATIONS_CONFIG,] }] },
        { type: ToastContainerService }
    ]; };
    return Toaster;
}());
export { Toaster };
if (false) {
    /**
     * @type {?}
     * @private
     */
    Toaster.prototype._config;
    /**
     * @type {?}
     * @private
     */
    Toaster.prototype._containerService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9hc3Rlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC10b2FzdC1ub3RpZmljYXRpb25zLyIsInNvdXJjZXMiOlsidG9hc3Rlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFekQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDbEUsT0FBTyxFQUFFLDBCQUEwQixFQUE0QixNQUFNLDhCQUE4QixDQUFDO0FBQ3BHLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLCtDQUErQyxDQUFDOztJQUdyRixjQUFjLEdBQWdCO0lBQ2xDLFNBQVMsRUFBRSxJQUFJO0lBQ2YsUUFBUSxFQUFFLElBQUk7SUFDZCxJQUFJLEVBQUUsT0FBTztJQUNiLFFBQVEsRUFBRSxjQUFjO0lBQ3hCLFNBQVMsRUFBRSwwQkFBMEI7Q0FDdEM7QUFFRDtJQUdFLGlCQUNnRCxPQUFpQyxFQUNyRSxpQkFBd0M7UUFESixZQUFPLEdBQVAsT0FBTyxDQUEwQjtRQUNyRSxzQkFBaUIsR0FBakIsaUJBQWlCLENBQXVCO0lBRXBELENBQUM7Ozs7OztJQU1ELHNCQUFJOzs7OztJQUFKLFVBQUssTUFBd0MsRUFBRSxlQUE2QjtRQUMxRSxJQUFJLE9BQU8sTUFBTSxLQUFLLFFBQVEsRUFBRTtZQUM5QixNQUFNLHNCQUFJLElBQUksRUFBRSxtQkFBQSxNQUFNLEVBQVUsSUFBSyxlQUFlLENBQUMsQ0FBQztTQUN2RDtRQUNELElBQUksTUFBTSxZQUFZLElBQUksRUFBRTtZQUMxQixNQUFNLHdCQUFPLGVBQWUsSUFBRSxTQUFTLEVBQUUsbUJBQUEsTUFBTSxFQUFhLEdBQUMsQ0FBQztTQUMvRDtRQUNELE1BQU0sd0JBQU8sY0FBYyxFQUFLLElBQUksQ0FBQyxPQUFPLEVBQUssTUFBTSxDQUFDLENBQUM7UUFDekQsT0FBTyxJQUFJLENBQUMsaUJBQWlCLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDekQsQ0FBQzs7Z0JBdEJGLFVBQVU7Ozs7Z0RBSUosTUFBTSxTQUFDLDBCQUEwQjtnQkFqQi9CLHFCQUFxQjs7SUFvQzlCLGNBQUM7Q0FBQSxBQXZCRCxJQXVCQztTQXRCWSxPQUFPOzs7Ozs7SUFHZCwwQkFBNkU7Ozs7O0lBQzdFLG9DQUFnRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSwgVHlwZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBUb2FzdENvbmZpZyB9IGZyb20gJy4vdG9hc3QuY29uZmlnJztcclxuaW1wb3J0IHsgVG9hc3RDb250YWluZXJTZXJ2aWNlIH0gZnJvbSAnLi90b2FzdC1jb250YWluZXIuc2VydmljZSc7XHJcbmltcG9ydCB7IFRPQVNUX05PVElGSUNBVElPTlNfQ09ORklHLCBUb2FzdE5vdGlmaWNhdGlvbnNDb25maWcgfSBmcm9tICcuL3RvYXN0LW5vdGlmaWNhdGlvbnMuY29uZmlnJztcclxuaW1wb3J0IHsgQmFzaWNUb2FzdENvbnRlbnRDb21wb25lbnQgfSBmcm9tICcuL3RvYXN0LWNvbnRlbnQvYmFzaWMtdG9hc3QtY29udGVudC5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBUb2FzdCB9IGZyb20gJy4vdG9hc3QnO1xyXG5cclxuY29uc3QgREVGQVVMVF9DT05GSUc6IFRvYXN0Q29uZmlnID0ge1xyXG4gIGF1dG9DbG9zZTogdHJ1ZSxcclxuICBkdXJhdGlvbjogODAwMCxcclxuICB0eXBlOiAnbGlnaHQnLFxyXG4gIHBvc2l0aW9uOiAnYm90dG9tLXJpZ2h0JyxcclxuICBjb21wb25lbnQ6IEJhc2ljVG9hc3RDb250ZW50Q29tcG9uZW50LFxyXG59O1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgVG9hc3RlciB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgICBASW5qZWN0KFRPQVNUX05PVElGSUNBVElPTlNfQ09ORklHKSBwcml2YXRlIF9jb25maWc6IFRvYXN0Tm90aWZpY2F0aW9uc0NvbmZpZyxcclxuICAgICAgcHJpdmF0ZSBfY29udGFpbmVyU2VydmljZTogVG9hc3RDb250YWluZXJTZXJ2aWNlLFxyXG4gICkge1xyXG4gIH1cclxuXHJcbiAgb3Blbih0ZXh0OiBzdHJpbmcpOiBUb2FzdCB8IG51bGw7XHJcbiAgb3Blbihjb25maWc6IFRvYXN0Q29uZmlnKTogVG9hc3QgfCBudWxsO1xyXG4gIG9wZW4odGV4dDogc3RyaW5nLCBjb25maWc/OiBUb2FzdENvbmZpZyk6IFRvYXN0IHwgbnVsbDtcclxuICBvcGVuKGNvbXBvbmVudDogVHlwZTxhbnk+LCBjb25maWc/OiBUb2FzdENvbmZpZyk6IFRvYXN0IHwgbnVsbDtcclxuICBvcGVuKGNvbmZpZzogVG9hc3RDb25maWcgfCBzdHJpbmcgfCBUeXBlPGFueT4sIGNvbXBvbmVudENvbmZpZz86IFRvYXN0Q29uZmlnKTogVG9hc3QgfCBudWxsIHtcclxuICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xyXG4gICAgICBjb25maWcgPSB7dGV4dDogY29uZmlnIGFzIHN0cmluZywgLi4uY29tcG9uZW50Q29uZmlnfTtcclxuICAgIH1cclxuICAgIGlmIChjb25maWcgaW5zdGFuY2VvZiBUeXBlKSB7XHJcbiAgICAgIGNvbmZpZyA9IHsuLi5jb21wb25lbnRDb25maWcsIGNvbXBvbmVudDogY29uZmlnIGFzIFR5cGU8YW55Pn07XHJcbiAgICB9XHJcbiAgICBjb25maWcgPSB7Li4uREVGQVVMVF9DT05GSUcsIC4uLnRoaXMuX2NvbmZpZywgLi4uY29uZmlnfTtcclxuICAgIHJldHVybiB0aGlzLl9jb250YWluZXJTZXJ2aWNlLnJlZi5pbnN0YW5jZS5hZGQoY29uZmlnKTtcclxuICB9XHJcbn1cclxuIl19