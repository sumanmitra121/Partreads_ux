/**
 * @fileoverview added by tsickle
 * Generated from: toast-notifications.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule, Optional, SkipSelf } from '@angular/core';
import { CommonModule } from '@angular/common';
import { TOAST_NOTIFICATIONS_CONFIG } from './toast-notifications.config';
import { ToastContainerComponent } from './toast-container/toast-container.component';
import { BasicToastContentComponent } from './toast-content/basic-toast-content.component';
import { ToastContentDirective } from './toast-content/toast-content.directive';
import { Toaster } from './toaster';
import { ToastContainerService } from './toast-container.service';
const ɵ0 = {};
export class ToastNotificationsModule {
    /**
     * @param {?} parentModule
     */
    constructor(parentModule) {
        if (parentModule) {
            throw new Error('ToastNotificationsModule is already loaded. Import it in the root module only');
        }
    }
    /**
     * @param {?=} config
     * @return {?}
     */
    static forRoot(config = {}) {
        return {
            ngModule: ToastNotificationsModule,
            providers: [
                { provide: TOAST_NOTIFICATIONS_CONFIG, useValue: config },
            ]
        };
    }
}
ToastNotificationsModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                ],
                declarations: [
                    ToastContainerComponent,
                    BasicToastContentComponent,
                    ToastContentDirective,
                ],
                entryComponents: [
                    ToastContainerComponent,
                    BasicToastContentComponent,
                ],
                providers: [
                    Toaster,
                    ToastContainerService,
                    { provide: TOAST_NOTIFICATIONS_CONFIG, useValue: ɵ0 },
                ],
            },] }
];
/** @nocollapse */
ToastNotificationsModule.ctorParameters = () => [
    { type: ToastNotificationsModule, decorators: [{ type: Optional }, { type: SkipSelf }] }
];
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9hc3Qtbm90aWZpY2F0aW9ucy5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtdG9hc3Qtbm90aWZpY2F0aW9ucy8iLCJzb3VyY2VzIjpbInRvYXN0LW5vdGlmaWNhdGlvbnMubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUF1QixRQUFRLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNsRixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLDBCQUEwQixFQUE0QixNQUFNLDhCQUE4QixDQUFDO0FBQ3BHLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDZDQUE2QyxDQUFDO0FBQ3RGLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLCtDQUErQyxDQUFDO0FBQzNGLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHlDQUF5QyxDQUFDO0FBQ2hGLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDcEMsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7V0FrQmQsRUFBRTtBQUd0RCxNQUFNLE9BQU8sd0JBQXdCOzs7O0lBRW5DLFlBQW9DLFlBQXNDO1FBQ3hFLElBQUksWUFBWSxFQUFFO1lBQ2hCLE1BQU0sSUFBSSxLQUFLLENBQUMsK0VBQStFLENBQUMsQ0FBQztTQUNsRztJQUNILENBQUM7Ozs7O0lBRUQsTUFBTSxDQUFDLE9BQU8sQ0FBQyxTQUFtQyxFQUFFO1FBQ2xELE9BQU87WUFDTCxRQUFRLEVBQUUsd0JBQXdCO1lBQ2xDLFNBQVMsRUFBRTtnQkFDVCxFQUFDLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFDO2FBQ3hEO1NBQ0YsQ0FBQztJQUNKLENBQUM7OztZQWxDRixRQUFRLFNBQUM7Z0JBQ1IsT0FBTyxFQUFFO29CQUNQLFlBQVk7aUJBQ2I7Z0JBQ0QsWUFBWSxFQUFFO29CQUNaLHVCQUF1QjtvQkFDdkIsMEJBQTBCO29CQUMxQixxQkFBcUI7aUJBQ3RCO2dCQUNELGVBQWUsRUFBRTtvQkFDZix1QkFBdUI7b0JBQ3ZCLDBCQUEwQjtpQkFDM0I7Z0JBQ0QsU0FBUyxFQUFFO29CQUNULE9BQU87b0JBQ1AscUJBQXFCO29CQUNyQixFQUFDLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxRQUFRLElBQUksRUFBQztpQkFDcEQ7YUFDRjs7OztZQUdtRCx3QkFBd0IsdUJBQTdELFFBQVEsWUFBSSxRQUFRIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTW9kdWxlV2l0aFByb3ZpZGVycywgTmdNb2R1bGUsIE9wdGlvbmFsLCBTa2lwU2VsZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xyXG5pbXBvcnQgeyBUT0FTVF9OT1RJRklDQVRJT05TX0NPTkZJRywgVG9hc3ROb3RpZmljYXRpb25zQ29uZmlnIH0gZnJvbSAnLi90b2FzdC1ub3RpZmljYXRpb25zLmNvbmZpZyc7XHJcbmltcG9ydCB7IFRvYXN0Q29udGFpbmVyQ29tcG9uZW50IH0gZnJvbSAnLi90b2FzdC1jb250YWluZXIvdG9hc3QtY29udGFpbmVyLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IEJhc2ljVG9hc3RDb250ZW50Q29tcG9uZW50IH0gZnJvbSAnLi90b2FzdC1jb250ZW50L2Jhc2ljLXRvYXN0LWNvbnRlbnQuY29tcG9uZW50JztcclxuaW1wb3J0IHsgVG9hc3RDb250ZW50RGlyZWN0aXZlIH0gZnJvbSAnLi90b2FzdC1jb250ZW50L3RvYXN0LWNvbnRlbnQuZGlyZWN0aXZlJztcclxuaW1wb3J0IHsgVG9hc3RlciB9IGZyb20gJy4vdG9hc3Rlcic7XHJcbmltcG9ydCB7IFRvYXN0Q29udGFpbmVyU2VydmljZSB9IGZyb20gJy4vdG9hc3QtY29udGFpbmVyLnNlcnZpY2UnO1xyXG5cclxuQE5nTW9kdWxlKHtcclxuICBpbXBvcnRzOiBbXHJcbiAgICBDb21tb25Nb2R1bGUsXHJcbiAgXSxcclxuICBkZWNsYXJhdGlvbnM6IFtcclxuICAgIFRvYXN0Q29udGFpbmVyQ29tcG9uZW50LFxyXG4gICAgQmFzaWNUb2FzdENvbnRlbnRDb21wb25lbnQsXHJcbiAgICBUb2FzdENvbnRlbnREaXJlY3RpdmUsXHJcbiAgXSxcclxuICBlbnRyeUNvbXBvbmVudHM6IFtcclxuICAgIFRvYXN0Q29udGFpbmVyQ29tcG9uZW50LFxyXG4gICAgQmFzaWNUb2FzdENvbnRlbnRDb21wb25lbnQsXHJcbiAgXSxcclxuICBwcm92aWRlcnM6IFtcclxuICAgIFRvYXN0ZXIsXHJcbiAgICBUb2FzdENvbnRhaW5lclNlcnZpY2UsXHJcbiAgICB7cHJvdmlkZTogVE9BU1RfTk9USUZJQ0FUSU9OU19DT05GSUcsIHVzZVZhbHVlOiB7fX0sXHJcbiAgXSxcclxufSlcclxuZXhwb3J0IGNsYXNzIFRvYXN0Tm90aWZpY2F0aW9uc01vZHVsZSB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIEBTa2lwU2VsZigpIHBhcmVudE1vZHVsZTogVG9hc3ROb3RpZmljYXRpb25zTW9kdWxlKSB7XHJcbiAgICBpZiAocGFyZW50TW9kdWxlKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignVG9hc3ROb3RpZmljYXRpb25zTW9kdWxlIGlzIGFscmVhZHkgbG9hZGVkLiBJbXBvcnQgaXQgaW4gdGhlIHJvb3QgbW9kdWxlIG9ubHknKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHN0YXRpYyBmb3JSb290KGNvbmZpZzogVG9hc3ROb3RpZmljYXRpb25zQ29uZmlnID0ge30pOiBNb2R1bGVXaXRoUHJvdmlkZXJzIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIG5nTW9kdWxlOiBUb2FzdE5vdGlmaWNhdGlvbnNNb2R1bGUsXHJcbiAgICAgIHByb3ZpZGVyczogW1xyXG4gICAgICAgIHtwcm92aWRlOiBUT0FTVF9OT1RJRklDQVRJT05TX0NPTkZJRywgdXNlVmFsdWU6IGNvbmZpZ30sXHJcbiAgICAgIF1cclxuICAgIH07XHJcbiAgfVxyXG59XHJcbiJdfQ==