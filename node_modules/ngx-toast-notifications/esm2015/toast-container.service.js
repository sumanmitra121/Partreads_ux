/**
 * @fileoverview added by tsickle
 * Generated from: toast-container.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ApplicationRef, ComponentFactoryResolver, Inject, Injectable, Injector, RendererFactory2 } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { ToastContainerComponent } from './toast-container/toast-container.component';
/** @type {?} */
const TOAST_CONTAINER_CLASS_NAME = 'toast-container';
export class ToastContainerService {
    /**
     * @param {?} rendererFactory
     * @param {?} _document
     * @param {?} _factoryResolver
     * @param {?} _appRef
     * @param {?} _injector
     */
    constructor(rendererFactory, _document, _factoryResolver, _appRef, _injector) {
        this._document = _document;
        this._factoryResolver = _factoryResolver;
        this._appRef = _appRef;
        this._injector = _injector;
        this._renderer = rendererFactory.createRenderer(null, null);
    }
    /**
     * @return {?}
     */
    get ref() {
        if (!this._componentRef) {
            this._attach();
        }
        return this._componentRef;
    }
    /**
     * @private
     * @return {?}
     */
    get containerElement() {
        if (!this._containerElement) {
            this._containerElement = this._renderer.createElement('div');
            this._renderer.addClass(this._containerElement, TOAST_CONTAINER_CLASS_NAME);
            this._renderer.appendChild(this._document.body, this._containerElement);
        }
        return this._containerElement;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._detach();
        this._destroyContainer();
    }
    /**
     * @private
     * @return {?}
     */
    _attach() {
        this._detach();
        /** @type {?} */
        const componentFactory = this._factoryResolver.resolveComponentFactory(ToastContainerComponent);
        this._componentRef = componentFactory.create(this._injector);
        /** @type {?} */
        const hostView = (/** @type {?} */ (this._componentRef.hostView));
        this._appRef.attachView(hostView);
        /** @type {?} */
        const rootNode = (/** @type {?} */ (hostView.rootNodes[0]));
        this._renderer.appendChild(this.containerElement, rootNode);
    }
    /**
     * @private
     * @return {?}
     */
    _detach() {
        if (this._componentRef) {
            this._appRef.detachView(this._componentRef.hostView);
            this._componentRef.destroy();
            this._componentRef = null;
        }
    }
    /**
     * @private
     * @return {?}
     */
    _destroyContainer() {
        if (this._containerElement && this._containerElement.parentNode) {
            this._renderer.removeChild(this._containerElement.parentNode, this._containerElement);
            this._containerElement = null;
        }
    }
}
ToastContainerService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ToastContainerService.ctorParameters = () => [
    { type: RendererFactory2 },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: ComponentFactoryResolver },
    { type: ApplicationRef },
    { type: Injector }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    ToastContainerService.prototype._renderer;
    /**
     * @type {?}
     * @private
     */
    ToastContainerService.prototype._containerElement;
    /**
     * @type {?}
     * @private
     */
    ToastContainerService.prototype._componentRef;
    /**
     * @type {?}
     * @private
     */
    ToastContainerService.prototype._document;
    /**
     * @type {?}
     * @private
     */
    ToastContainerService.prototype._factoryResolver;
    /**
     * @type {?}
     * @private
     */
    ToastContainerService.prototype._appRef;
    /**
     * @type {?}
     * @private
     */
    ToastContainerService.prototype._injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9hc3QtY29udGFpbmVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtdG9hc3Qtbm90aWZpY2F0aW9ucy8iLCJzb3VyY2VzIjpbInRvYXN0LWNvbnRhaW5lci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUNMLGNBQWMsRUFDZCx3QkFBd0IsRUFHeEIsTUFBTSxFQUNOLFVBQVUsRUFDVixRQUFRLEVBR1IsZ0JBQWdCLEVBQ2pCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMzQyxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSw2Q0FBNkMsQ0FBQzs7TUFFaEYsMEJBQTBCLEdBQUcsaUJBQWlCO0FBR3BELE1BQU0sT0FBTyxxQkFBcUI7Ozs7Ozs7O0lBTWhDLFlBQ0UsZUFBaUMsRUFDUCxTQUFjLEVBQ2hDLGdCQUEwQyxFQUMxQyxPQUF1QixFQUN2QixTQUFtQjtRQUhELGNBQVMsR0FBVCxTQUFTLENBQUs7UUFDaEMscUJBQWdCLEdBQWhCLGdCQUFnQixDQUEwQjtRQUMxQyxZQUFPLEdBQVAsT0FBTyxDQUFnQjtRQUN2QixjQUFTLEdBQVQsU0FBUyxDQUFVO1FBRTNCLElBQUksQ0FBQyxTQUFTLEdBQUcsZUFBZSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDOUQsQ0FBQzs7OztJQUVELElBQUksR0FBRztRQUNMLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFO1lBQ3ZCLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztTQUNoQjtRQUNELE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQztJQUM1QixDQUFDOzs7OztJQUVELElBQVksZ0JBQWdCO1FBQzFCLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEVBQUU7WUFDM0IsSUFBSSxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzdELElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsRUFBRSwwQkFBMEIsQ0FBQyxDQUFDO1lBQzVFLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1NBQ3pFO1FBQ0QsT0FBTyxJQUFJLENBQUMsaUJBQWlCLENBQUM7SUFDaEMsQ0FBQzs7OztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDZixJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztJQUMzQixDQUFDOzs7OztJQUVPLE9BQU87UUFDYixJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7O2NBQ1QsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLHVCQUF1QixDQUFDLHVCQUF1QixDQUFDO1FBQy9GLElBQUksQ0FBQyxhQUFhLEdBQUcsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQzs7Y0FDdkQsUUFBUSxHQUFHLG1CQUFBLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxFQUF3QjtRQUNwRSxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQzs7Y0FDNUIsUUFBUSxHQUFHLG1CQUFBLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQWU7UUFDckQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQzlELENBQUM7Ozs7O0lBRU8sT0FBTztRQUNiLElBQUksSUFBSSxDQUFDLGFBQWEsRUFBRTtZQUN0QixJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ3JELElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDN0IsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUM7U0FDM0I7SUFDSCxDQUFDOzs7OztJQUVPLGlCQUFpQjtRQUN2QixJQUFJLElBQUksQ0FBQyxpQkFBaUIsSUFBSSxJQUFJLENBQUMsaUJBQWlCLENBQUMsVUFBVSxFQUFFO1lBQy9ELElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUM7WUFDdEYsSUFBSSxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQztTQUMvQjtJQUNILENBQUM7OztZQTdERixVQUFVOzs7O1lBUFQsZ0JBQWdCOzRDQWdCYixNQUFNLFNBQUMsUUFBUTtZQXhCbEIsd0JBQXdCO1lBRHhCLGNBQWM7WUFNZCxRQUFROzs7Ozs7O0lBYVIsMENBQTZCOzs7OztJQUM3QixrREFBdUM7Ozs7O0lBQ3ZDLDhDQUE2RDs7Ozs7SUFJM0QsMENBQXdDOzs7OztJQUN4QyxpREFBa0Q7Ozs7O0lBQ2xELHdDQUErQjs7Ozs7SUFDL0IsMENBQTJCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICBBcHBsaWNhdGlvblJlZixcclxuICBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsXHJcbiAgQ29tcG9uZW50UmVmLFxyXG4gIEVtYmVkZGVkVmlld1JlZixcclxuICBJbmplY3QsXHJcbiAgSW5qZWN0YWJsZSxcclxuICBJbmplY3RvcixcclxuICBPbkRlc3Ryb3ksXHJcbiAgUmVuZGVyZXIyLFxyXG4gIFJlbmRlcmVyRmFjdG9yeTJcclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRE9DVU1FTlQgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xyXG5pbXBvcnQgeyBUb2FzdENvbnRhaW5lckNvbXBvbmVudCB9IGZyb20gJy4vdG9hc3QtY29udGFpbmVyL3RvYXN0LWNvbnRhaW5lci5jb21wb25lbnQnO1xyXG5cclxuY29uc3QgVE9BU1RfQ09OVEFJTkVSX0NMQVNTX05BTUUgPSAndG9hc3QtY29udGFpbmVyJztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIFRvYXN0Q29udGFpbmVyU2VydmljZSBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XHJcblxyXG4gIHByaXZhdGUgX3JlbmRlcmVyOiBSZW5kZXJlcjI7XHJcbiAgcHJpdmF0ZSBfY29udGFpbmVyRWxlbWVudDogSFRNTEVsZW1lbnQ7XHJcbiAgcHJpdmF0ZSBfY29tcG9uZW50UmVmOiBDb21wb25lbnRSZWY8VG9hc3RDb250YWluZXJDb21wb25lbnQ+O1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHJlbmRlcmVyRmFjdG9yeTogUmVuZGVyZXJGYWN0b3J5MixcclxuICAgIEBJbmplY3QoRE9DVU1FTlQpIHByaXZhdGUgX2RvY3VtZW50OiBhbnksXHJcbiAgICBwcml2YXRlIF9mYWN0b3J5UmVzb2x2ZXI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcixcclxuICAgIHByaXZhdGUgX2FwcFJlZjogQXBwbGljYXRpb25SZWYsXHJcbiAgICBwcml2YXRlIF9pbmplY3RvcjogSW5qZWN0b3IsXHJcbiAgKSB7XHJcbiAgICB0aGlzLl9yZW5kZXJlciA9IHJlbmRlcmVyRmFjdG9yeS5jcmVhdGVSZW5kZXJlcihudWxsLCBudWxsKTtcclxuICB9XHJcblxyXG4gIGdldCByZWYoKTogQ29tcG9uZW50UmVmPFRvYXN0Q29udGFpbmVyQ29tcG9uZW50PiB7XHJcbiAgICBpZiAoIXRoaXMuX2NvbXBvbmVudFJlZikge1xyXG4gICAgICB0aGlzLl9hdHRhY2goKTtcclxuICAgIH1cclxuICAgIHJldHVybiB0aGlzLl9jb21wb25lbnRSZWY7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGdldCBjb250YWluZXJFbGVtZW50KCk6IEhUTUxFbGVtZW50IHtcclxuICAgIGlmICghdGhpcy5fY29udGFpbmVyRWxlbWVudCkge1xyXG4gICAgICB0aGlzLl9jb250YWluZXJFbGVtZW50ID0gdGhpcy5fcmVuZGVyZXIuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgIHRoaXMuX3JlbmRlcmVyLmFkZENsYXNzKHRoaXMuX2NvbnRhaW5lckVsZW1lbnQsIFRPQVNUX0NPTlRBSU5FUl9DTEFTU19OQU1FKTtcclxuICAgICAgdGhpcy5fcmVuZGVyZXIuYXBwZW5kQ2hpbGQodGhpcy5fZG9jdW1lbnQuYm9keSwgdGhpcy5fY29udGFpbmVyRWxlbWVudCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhpcy5fY29udGFpbmVyRWxlbWVudDtcclxuICB9XHJcblxyXG4gIG5nT25EZXN0cm95KCkge1xyXG4gICAgdGhpcy5fZGV0YWNoKCk7XHJcbiAgICB0aGlzLl9kZXN0cm95Q29udGFpbmVyKCk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIF9hdHRhY2goKSB7XHJcbiAgICB0aGlzLl9kZXRhY2goKTtcclxuICAgIGNvbnN0IGNvbXBvbmVudEZhY3RvcnkgPSB0aGlzLl9mYWN0b3J5UmVzb2x2ZXIucmVzb2x2ZUNvbXBvbmVudEZhY3RvcnkoVG9hc3RDb250YWluZXJDb21wb25lbnQpO1xyXG4gICAgdGhpcy5fY29tcG9uZW50UmVmID0gY29tcG9uZW50RmFjdG9yeS5jcmVhdGUodGhpcy5faW5qZWN0b3IpO1xyXG4gICAgY29uc3QgaG9zdFZpZXcgPSB0aGlzLl9jb21wb25lbnRSZWYuaG9zdFZpZXcgYXMgRW1iZWRkZWRWaWV3UmVmPGFueT47XHJcbiAgICB0aGlzLl9hcHBSZWYuYXR0YWNoVmlldyhob3N0Vmlldyk7XHJcbiAgICBjb25zdCByb290Tm9kZSA9IGhvc3RWaWV3LnJvb3ROb2Rlc1swXSBhcyBIVE1MRWxlbWVudDtcclxuICAgIHRoaXMuX3JlbmRlcmVyLmFwcGVuZENoaWxkKHRoaXMuY29udGFpbmVyRWxlbWVudCwgcm9vdE5vZGUpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBfZGV0YWNoKCkge1xyXG4gICAgaWYgKHRoaXMuX2NvbXBvbmVudFJlZikge1xyXG4gICAgICB0aGlzLl9hcHBSZWYuZGV0YWNoVmlldyh0aGlzLl9jb21wb25lbnRSZWYuaG9zdFZpZXcpO1xyXG4gICAgICB0aGlzLl9jb21wb25lbnRSZWYuZGVzdHJveSgpO1xyXG4gICAgICB0aGlzLl9jb21wb25lbnRSZWYgPSBudWxsO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBfZGVzdHJveUNvbnRhaW5lcigpIHtcclxuICAgIGlmICh0aGlzLl9jb250YWluZXJFbGVtZW50ICYmIHRoaXMuX2NvbnRhaW5lckVsZW1lbnQucGFyZW50Tm9kZSkge1xyXG4gICAgICB0aGlzLl9yZW5kZXJlci5yZW1vdmVDaGlsZCh0aGlzLl9jb250YWluZXJFbGVtZW50LnBhcmVudE5vZGUsIHRoaXMuX2NvbnRhaW5lckVsZW1lbnQpO1xyXG4gICAgICB0aGlzLl9jb250YWluZXJFbGVtZW50ID0gbnVsbDtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19