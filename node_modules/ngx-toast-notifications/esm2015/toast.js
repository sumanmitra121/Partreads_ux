/**
 * @fileoverview added by tsickle
 * Generated from: toast.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Subject } from 'rxjs';
export class Toast {
    /**
     * @param {?} config
     * @param {?} closeFunction
     */
    constructor(config, closeFunction) {
        this._onClose = new Subject();
        this.autoClose = config.autoClose;
        this.duration = config.duration > 0 ? config.duration : 0;
        this.text = config.text;
        this.caption = config.caption;
        this.type = config.type;
        this.component = config.component;
        this._closeFunction = closeFunction;
        this._setTimeout();
    }
    /**
     * @return {?}
     */
    get onClose() {
        return this._onClose.asObservable();
    }
    /**
     * @param {?=} result
     * @return {?}
     */
    close(result) {
        if (!this._onClose.closed) {
            this._onClose.next(result);
            this._onClose.complete();
        }
        this._closeFunction(this);
        this._clearTimeout();
    }
    /**
     * @private
     * @return {?}
     */
    _setTimeout() {
        if (this.autoClose && this.duration > 0) {
            this._timeoutId = setTimeout((/**
             * @return {?}
             */
            () => this.close()), this.duration);
        }
    }
    /**
     * @private
     * @return {?}
     */
    _clearTimeout() {
        if (this._timeoutId) {
            clearTimeout(this._timeoutId);
        }
    }
}
if (false) {
    /** @type {?} */
    Toast.prototype.autoClose;
    /** @type {?} */
    Toast.prototype.duration;
    /** @type {?} */
    Toast.prototype.text;
    /** @type {?} */
    Toast.prototype.caption;
    /** @type {?} */
    Toast.prototype.type;
    /** @type {?} */
    Toast.prototype.component;
    /**
     * @type {?}
     * @private
     */
    Toast.prototype._closeFunction;
    /**
     * @type {?}
     * @private
     */
    Toast.prototype._onClose;
    /**
     * @type {?}
     * @private
     */
    Toast.prototype._timeoutId;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9hc3QuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtdG9hc3Qtbm90aWZpY2F0aW9ucy8iLCJzb3VyY2VzIjpbInRvYXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFjLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUszQyxNQUFNLE9BQU8sS0FBSzs7Ozs7SUFhaEIsWUFDSSxNQUFtQixFQUNuQixhQUFxQztRQUx4QixhQUFRLEdBQUcsSUFBSSxPQUFPLEVBQU8sQ0FBQztRQU83QyxJQUFJLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUM7UUFDbEMsSUFBSSxDQUFDLFFBQVEsR0FBRyxNQUFNLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzFELElBQUksQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQztRQUN4QixJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUM7UUFDOUIsSUFBSSxDQUFDLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDO1FBQ3hCLElBQUksQ0FBQyxTQUFTLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQztRQUNsQyxJQUFJLENBQUMsY0FBYyxHQUFHLGFBQWEsQ0FBQztRQUNwQyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDckIsQ0FBQzs7OztJQUVELElBQUksT0FBTztRQUNULE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUN0QyxDQUFDOzs7OztJQUVELEtBQUssQ0FBQyxNQUFZO1FBQ2hCLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRTtZQUN6QixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUMzQixJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDO1NBQzFCO1FBQ0QsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMxQixJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDdkIsQ0FBQzs7Ozs7SUFFTyxXQUFXO1FBQ2pCLElBQUksSUFBSSxDQUFDLFNBQVMsSUFBSSxJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsRUFBRTtZQUN2QyxJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVU7OztZQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsR0FBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDakU7SUFDSCxDQUFDOzs7OztJQUVPLGFBQWE7UUFDbkIsSUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ25CLFlBQVksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7U0FDL0I7SUFDSCxDQUFDO0NBQ0Y7OztJQWpEQywwQkFBNEI7O0lBQzVCLHlCQUEwQjs7SUFDMUIscUJBQXNCOztJQUN0Qix3QkFBeUI7O0lBQ3pCLHFCQUF5Qjs7SUFDekIsMEJBQThCOzs7OztJQUU5QiwrQkFBd0Q7Ozs7O0lBQ3hELHlCQUErQzs7Ozs7SUFDL0MsMkJBQXdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBUeXBlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFRvYXN0VHlwZSB9IGZyb20gJy4vdG9hc3Qtbm90aWZpY2F0aW9ucy5jb25maWcnO1xyXG5pbXBvcnQgeyBUb2FzdENvbmZpZyB9IGZyb20gJy4vdG9hc3QuY29uZmlnJztcclxuXHJcbmV4cG9ydCBjbGFzcyBUb2FzdCB7XHJcblxyXG4gIHJlYWRvbmx5IGF1dG9DbG9zZTogYm9vbGVhbjtcclxuICByZWFkb25seSBkdXJhdGlvbjogbnVtYmVyO1xyXG4gIHJlYWRvbmx5IHRleHQ6IHN0cmluZztcclxuICByZWFkb25seSBjYXB0aW9uOiBzdHJpbmc7XHJcbiAgcmVhZG9ubHkgdHlwZTogVG9hc3RUeXBlO1xyXG4gIHJlYWRvbmx5IGNvbXBvbmVudDogVHlwZTxhbnk+O1xyXG5cclxuICBwcml2YXRlIHJlYWRvbmx5IF9jbG9zZUZ1bmN0aW9uOiAodG9hc3Q6IFRvYXN0KSA9PiB2b2lkO1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgX29uQ2xvc2UgPSBuZXcgU3ViamVjdDxhbnk+KCk7XHJcbiAgcHJpdmF0ZSBfdGltZW91dElkOiBhbnk7XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgICBjb25maWc6IFRvYXN0Q29uZmlnLFxyXG4gICAgICBjbG9zZUZ1bmN0aW9uOiAodG9hc3Q6IFRvYXN0KSA9PiB2b2lkLFxyXG4gICkge1xyXG4gICAgdGhpcy5hdXRvQ2xvc2UgPSBjb25maWcuYXV0b0Nsb3NlO1xyXG4gICAgdGhpcy5kdXJhdGlvbiA9IGNvbmZpZy5kdXJhdGlvbiA+IDAgPyBjb25maWcuZHVyYXRpb24gOiAwO1xyXG4gICAgdGhpcy50ZXh0ID0gY29uZmlnLnRleHQ7XHJcbiAgICB0aGlzLmNhcHRpb24gPSBjb25maWcuY2FwdGlvbjtcclxuICAgIHRoaXMudHlwZSA9IGNvbmZpZy50eXBlO1xyXG4gICAgdGhpcy5jb21wb25lbnQgPSBjb25maWcuY29tcG9uZW50O1xyXG4gICAgdGhpcy5fY2xvc2VGdW5jdGlvbiA9IGNsb3NlRnVuY3Rpb247XHJcbiAgICB0aGlzLl9zZXRUaW1lb3V0KCk7XHJcbiAgfVxyXG5cclxuICBnZXQgb25DbG9zZSgpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgcmV0dXJuIHRoaXMuX29uQ2xvc2UuYXNPYnNlcnZhYmxlKCk7XHJcbiAgfVxyXG5cclxuICBjbG9zZShyZXN1bHQ/OiBhbnkpIHtcclxuICAgIGlmICghdGhpcy5fb25DbG9zZS5jbG9zZWQpIHtcclxuICAgICAgdGhpcy5fb25DbG9zZS5uZXh0KHJlc3VsdCk7XHJcbiAgICAgIHRoaXMuX29uQ2xvc2UuY29tcGxldGUoKTtcclxuICAgIH1cclxuICAgIHRoaXMuX2Nsb3NlRnVuY3Rpb24odGhpcyk7XHJcbiAgICB0aGlzLl9jbGVhclRpbWVvdXQoKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgX3NldFRpbWVvdXQoKSB7XHJcbiAgICBpZiAodGhpcy5hdXRvQ2xvc2UgJiYgdGhpcy5kdXJhdGlvbiA+IDApIHtcclxuICAgICAgdGhpcy5fdGltZW91dElkID0gc2V0VGltZW91dCgoKSA9PiB0aGlzLmNsb3NlKCksIHRoaXMuZHVyYXRpb24pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBfY2xlYXJUaW1lb3V0KCkge1xyXG4gICAgaWYgKHRoaXMuX3RpbWVvdXRJZCkge1xyXG4gICAgICBjbGVhclRpbWVvdXQodGhpcy5fdGltZW91dElkKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19