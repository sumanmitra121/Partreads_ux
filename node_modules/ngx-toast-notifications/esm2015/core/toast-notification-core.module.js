/**
 * @fileoverview added by tsickle
 * Generated from: core/toast-notification-core.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule, Optional, SkipSelf } from '@angular/core';
import { ToastNotifications } from './toast-natifications';
import { TOAST_NOTIFICATIONS_CONFIG } from '../toast-notifications.config';
import { ToastNotificationsModule } from '../toast-notifications.module';
/** @type {?} */
const defaultConfig = { lifetime: 8000 };
/**
 * @deprecated since version 1.0.0 use ToastNotificationsModule
 */
export class ToastNotificationCoreModule {
    /**
     * @param {?} parentModule
     */
    constructor(parentModule) {
        if (parentModule) {
            throw new Error('ToastNotificationCoreModule is already loaded. Import it in the root module only');
        }
    }
    /**
     * @param {?=} config
     * @return {?}
     */
    static forRoot(config = defaultConfig) {
        return {
            ngModule: ToastNotificationCoreModule,
            providers: [
                { provide: TOAST_NOTIFICATIONS_CONFIG, useValue: { duration: config.duration || config.lifetime } }
            ]
        };
    }
}
ToastNotificationCoreModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    ToastNotificationsModule,
                ],
                providers: [
                    ToastNotifications,
                ],
            },] }
];
/** @nocollapse */
ToastNotificationCoreModule.ctorParameters = () => [
    { type: ToastNotificationCoreModule, decorators: [{ type: Optional }, { type: SkipSelf }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9hc3Qtbm90aWZpY2F0aW9uLWNvcmUubW9kdWxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LXRvYXN0LW5vdGlmaWNhdGlvbnMvIiwic291cmNlcyI6WyJjb3JlL3RvYXN0LW5vdGlmaWNhdGlvbi1jb3JlLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBdUIsUUFBUSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbEYsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDM0QsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDM0UsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sK0JBQStCLENBQUM7O01BRW5FLGFBQWEsR0FBMkMsRUFBQyxRQUFRLEVBQUUsSUFBSSxFQUFDO0FBVTlFOztHQUVHO0FBQ0gsTUFBTSxPQUFPLDJCQUEyQjs7OztJQUV0QyxZQUFvQyxZQUF5QztRQUMzRSxJQUFJLFlBQVksRUFBRTtZQUNoQixNQUFNLElBQUksS0FBSyxDQUFDLGtGQUFrRixDQUFDLENBQUM7U0FDckc7SUFDSCxDQUFDOzs7OztJQUVELE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLGFBQWE7UUFDbkMsT0FBTztZQUNMLFFBQVEsRUFBRSwyQkFBMkI7WUFDckMsU0FBUyxFQUFFO2dCQUNULEVBQUMsT0FBTyxFQUFFLDBCQUEwQixFQUFFLFFBQVEsRUFBRSxFQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsUUFBUSxJQUFJLE1BQU0sQ0FBQyxRQUFRLEVBQUMsRUFBQzthQUNoRztTQUNGLENBQUM7SUFDSixDQUFDOzs7WUExQkYsUUFBUSxTQUFDO2dCQUNSLE9BQU8sRUFBRTtvQkFDUCx3QkFBd0I7aUJBQ3pCO2dCQUNELFNBQVMsRUFBRTtvQkFDVCxrQkFBa0I7aUJBQ25CO2FBQ0Y7Ozs7WUFNbUQsMkJBQTJCLHVCQUFoRSxRQUFRLFlBQUksUUFBUSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1vZHVsZVdpdGhQcm92aWRlcnMsIE5nTW9kdWxlLCBPcHRpb25hbCwgU2tpcFNlbGYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgVG9hc3ROb3RpZmljYXRpb25zIH0gZnJvbSAnLi90b2FzdC1uYXRpZmljYXRpb25zJztcclxuaW1wb3J0IHsgVE9BU1RfTk9USUZJQ0FUSU9OU19DT05GSUcgfSBmcm9tICcuLi90b2FzdC1ub3RpZmljYXRpb25zLmNvbmZpZyc7XHJcbmltcG9ydCB7IFRvYXN0Tm90aWZpY2F0aW9uc01vZHVsZSB9IGZyb20gJy4uL3RvYXN0LW5vdGlmaWNhdGlvbnMubW9kdWxlJztcclxuXHJcbmNvbnN0IGRlZmF1bHRDb25maWc6IHtsaWZldGltZT86IG51bWJlciwgZHVyYXRpb24/OiBudW1iZXJ9ID0ge2xpZmV0aW1lOiA4MDAwfTtcclxuXHJcbkBOZ01vZHVsZSh7XHJcbiAgaW1wb3J0czogW1xyXG4gICAgVG9hc3ROb3RpZmljYXRpb25zTW9kdWxlLFxyXG4gIF0sXHJcbiAgcHJvdmlkZXJzOiBbXHJcbiAgICBUb2FzdE5vdGlmaWNhdGlvbnMsXHJcbiAgXSxcclxufSlcclxuLyoqXHJcbiAqIEBkZXByZWNhdGVkIHNpbmNlIHZlcnNpb24gMS4wLjAgdXNlIFRvYXN0Tm90aWZpY2F0aW9uc01vZHVsZVxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFRvYXN0Tm90aWZpY2F0aW9uQ29yZU1vZHVsZSB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIEBTa2lwU2VsZigpIHBhcmVudE1vZHVsZTogVG9hc3ROb3RpZmljYXRpb25Db3JlTW9kdWxlKSB7XHJcbiAgICBpZiAocGFyZW50TW9kdWxlKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignVG9hc3ROb3RpZmljYXRpb25Db3JlTW9kdWxlIGlzIGFscmVhZHkgbG9hZGVkLiBJbXBvcnQgaXQgaW4gdGhlIHJvb3QgbW9kdWxlIG9ubHknKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHN0YXRpYyBmb3JSb290KGNvbmZpZyA9IGRlZmF1bHRDb25maWcpOiBNb2R1bGVXaXRoUHJvdmlkZXJzIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIG5nTW9kdWxlOiBUb2FzdE5vdGlmaWNhdGlvbkNvcmVNb2R1bGUsXHJcbiAgICAgIHByb3ZpZGVyczogW1xyXG4gICAgICAgIHtwcm92aWRlOiBUT0FTVF9OT1RJRklDQVRJT05TX0NPTkZJRywgdXNlVmFsdWU6IHtkdXJhdGlvbjogY29uZmlnLmR1cmF0aW9uIHx8IGNvbmZpZy5saWZldGltZX19XHJcbiAgICAgIF1cclxuICAgIH07XHJcbiAgfVxyXG59XHJcbiJdfQ==