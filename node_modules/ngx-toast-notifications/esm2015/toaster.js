/**
 * @fileoverview added by tsickle
 * Generated from: toaster.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Injectable, Type } from '@angular/core';
import { ToastContainerService } from './toast-container.service';
import { TOAST_NOTIFICATIONS_CONFIG } from './toast-notifications.config';
import { BasicToastContentComponent } from './toast-content/basic-toast-content.component';
/** @type {?} */
const DEFAULT_CONFIG = {
    autoClose: true,
    duration: 8000,
    type: 'light',
    position: 'bottom-right',
    component: BasicToastContentComponent,
};
export class Toaster {
    /**
     * @param {?} _config
     * @param {?} _containerService
     */
    constructor(_config, _containerService) {
        this._config = _config;
        this._containerService = _containerService;
    }
    /**
     * @param {?} config
     * @param {?=} componentConfig
     * @return {?}
     */
    open(config, componentConfig) {
        if (typeof config === 'string') {
            config = Object.assign({ text: (/** @type {?} */ (config)) }, componentConfig);
        }
        if (config instanceof Type) {
            config = Object.assign({}, componentConfig, { component: (/** @type {?} */ (config)) });
        }
        config = Object.assign({}, DEFAULT_CONFIG, this._config, config);
        return this._containerService.ref.instance.add(config);
    }
}
Toaster.decorators = [
    { type: Injectable }
];
/** @nocollapse */
Toaster.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [TOAST_NOTIFICATIONS_CONFIG,] }] },
    { type: ToastContainerService }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    Toaster.prototype._config;
    /**
     * @type {?}
     * @private
     */
    Toaster.prototype._containerService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9hc3Rlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC10b2FzdC1ub3RpZmljYXRpb25zLyIsInNvdXJjZXMiOlsidG9hc3Rlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV6RCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUNsRSxPQUFPLEVBQUUsMEJBQTBCLEVBQTRCLE1BQU0sOEJBQThCLENBQUM7QUFDcEcsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sK0NBQStDLENBQUM7O01BR3JGLGNBQWMsR0FBZ0I7SUFDbEMsU0FBUyxFQUFFLElBQUk7SUFDZixRQUFRLEVBQUUsSUFBSTtJQUNkLElBQUksRUFBRSxPQUFPO0lBQ2IsUUFBUSxFQUFFLGNBQWM7SUFDeEIsU0FBUyxFQUFFLDBCQUEwQjtDQUN0QztBQUdELE1BQU0sT0FBTyxPQUFPOzs7OztJQUVsQixZQUNnRCxPQUFpQyxFQUNyRSxpQkFBd0M7UUFESixZQUFPLEdBQVAsT0FBTyxDQUEwQjtRQUNyRSxzQkFBaUIsR0FBakIsaUJBQWlCLENBQXVCO0lBRXBELENBQUM7Ozs7OztJQU1ELElBQUksQ0FBQyxNQUF3QyxFQUFFLGVBQTZCO1FBQzFFLElBQUksT0FBTyxNQUFNLEtBQUssUUFBUSxFQUFFO1lBQzlCLE1BQU0sbUJBQUksSUFBSSxFQUFFLG1CQUFBLE1BQU0sRUFBVSxJQUFLLGVBQWUsQ0FBQyxDQUFDO1NBQ3ZEO1FBQ0QsSUFBSSxNQUFNLFlBQVksSUFBSSxFQUFFO1lBQzFCLE1BQU0scUJBQU8sZUFBZSxJQUFFLFNBQVMsRUFBRSxtQkFBQSxNQUFNLEVBQWEsR0FBQyxDQUFDO1NBQy9EO1FBQ0QsTUFBTSxxQkFBTyxjQUFjLEVBQUssSUFBSSxDQUFDLE9BQU8sRUFBSyxNQUFNLENBQUMsQ0FBQztRQUN6RCxPQUFPLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN6RCxDQUFDOzs7WUF0QkYsVUFBVTs7Ozs0Q0FJSixNQUFNLFNBQUMsMEJBQTBCO1lBakIvQixxQkFBcUI7Ozs7Ozs7SUFpQnhCLDBCQUE2RTs7Ozs7SUFDN0Usb0NBQWdEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0LCBJbmplY3RhYmxlLCBUeXBlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFRvYXN0Q29uZmlnIH0gZnJvbSAnLi90b2FzdC5jb25maWcnO1xyXG5pbXBvcnQgeyBUb2FzdENvbnRhaW5lclNlcnZpY2UgfSBmcm9tICcuL3RvYXN0LWNvbnRhaW5lci5zZXJ2aWNlJztcclxuaW1wb3J0IHsgVE9BU1RfTk9USUZJQ0FUSU9OU19DT05GSUcsIFRvYXN0Tm90aWZpY2F0aW9uc0NvbmZpZyB9IGZyb20gJy4vdG9hc3Qtbm90aWZpY2F0aW9ucy5jb25maWcnO1xyXG5pbXBvcnQgeyBCYXNpY1RvYXN0Q29udGVudENvbXBvbmVudCB9IGZyb20gJy4vdG9hc3QtY29udGVudC9iYXNpYy10b2FzdC1jb250ZW50LmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IFRvYXN0IH0gZnJvbSAnLi90b2FzdCc7XHJcblxyXG5jb25zdCBERUZBVUxUX0NPTkZJRzogVG9hc3RDb25maWcgPSB7XHJcbiAgYXV0b0Nsb3NlOiB0cnVlLFxyXG4gIGR1cmF0aW9uOiA4MDAwLFxyXG4gIHR5cGU6ICdsaWdodCcsXHJcbiAgcG9zaXRpb246ICdib3R0b20tcmlnaHQnLFxyXG4gIGNvbXBvbmVudDogQmFzaWNUb2FzdENvbnRlbnRDb21wb25lbnQsXHJcbn07XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBUb2FzdGVyIHtcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICAgIEBJbmplY3QoVE9BU1RfTk9USUZJQ0FUSU9OU19DT05GSUcpIHByaXZhdGUgX2NvbmZpZzogVG9hc3ROb3RpZmljYXRpb25zQ29uZmlnLFxyXG4gICAgICBwcml2YXRlIF9jb250YWluZXJTZXJ2aWNlOiBUb2FzdENvbnRhaW5lclNlcnZpY2UsXHJcbiAgKSB7XHJcbiAgfVxyXG5cclxuICBvcGVuKHRleHQ6IHN0cmluZyk6IFRvYXN0IHwgbnVsbDtcclxuICBvcGVuKGNvbmZpZzogVG9hc3RDb25maWcpOiBUb2FzdCB8IG51bGw7XHJcbiAgb3Blbih0ZXh0OiBzdHJpbmcsIGNvbmZpZz86IFRvYXN0Q29uZmlnKTogVG9hc3QgfCBudWxsO1xyXG4gIG9wZW4oY29tcG9uZW50OiBUeXBlPGFueT4sIGNvbmZpZz86IFRvYXN0Q29uZmlnKTogVG9hc3QgfCBudWxsO1xyXG4gIG9wZW4oY29uZmlnOiBUb2FzdENvbmZpZyB8IHN0cmluZyB8IFR5cGU8YW55PiwgY29tcG9uZW50Q29uZmlnPzogVG9hc3RDb25maWcpOiBUb2FzdCB8IG51bGwge1xyXG4gICAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgIGNvbmZpZyA9IHt0ZXh0OiBjb25maWcgYXMgc3RyaW5nLCAuLi5jb21wb25lbnRDb25maWd9O1xyXG4gICAgfVxyXG4gICAgaWYgKGNvbmZpZyBpbnN0YW5jZW9mIFR5cGUpIHtcclxuICAgICAgY29uZmlnID0gey4uLmNvbXBvbmVudENvbmZpZywgY29tcG9uZW50OiBjb25maWcgYXMgVHlwZTxhbnk+fTtcclxuICAgIH1cclxuICAgIGNvbmZpZyA9IHsuLi5ERUZBVUxUX0NPTkZJRywgLi4udGhpcy5fY29uZmlnLCAuLi5jb25maWd9O1xyXG4gICAgcmV0dXJuIHRoaXMuX2NvbnRhaW5lclNlcnZpY2UucmVmLmluc3RhbmNlLmFkZChjb25maWcpO1xyXG4gIH1cclxufVxyXG4iXX0=