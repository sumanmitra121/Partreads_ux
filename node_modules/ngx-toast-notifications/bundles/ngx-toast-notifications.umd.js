(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular/animations'), require('rxjs')) :
    typeof define === 'function' && define.amd ? define('ngx-toast-notifications', ['exports', '@angular/core', '@angular/common', '@angular/animations', 'rxjs'], factory) :
    (global = global || self, factory(global['ngx-toast-notifications'] = {}, global.ng.core, global.ng.common, global.ng.animations, global.rxjs));
}(this, (function (exports, core, common, animations, rxjs) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __exportStar(m, exports) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m) return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: toast.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var Toast = /** @class */ (function () {
        function Toast(config, closeFunction) {
            this._onClose = new rxjs.Subject();
            this.autoClose = config.autoClose;
            this.duration = config.duration > 0 ? config.duration : 0;
            this.text = config.text;
            this.caption = config.caption;
            this.type = config.type;
            this.component = config.component;
            this._closeFunction = closeFunction;
            this._setTimeout();
        }
        Object.defineProperty(Toast.prototype, "onClose", {
            get: /**
             * @return {?}
             */
            function () {
                return this._onClose.asObservable();
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?=} result
         * @return {?}
         */
        Toast.prototype.close = /**
         * @param {?=} result
         * @return {?}
         */
        function (result) {
            if (!this._onClose.closed) {
                this._onClose.next(result);
                this._onClose.complete();
            }
            this._closeFunction(this);
            this._clearTimeout();
        };
        /**
         * @private
         * @return {?}
         */
        Toast.prototype._setTimeout = /**
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            if (this.autoClose && this.duration > 0) {
                this._timeoutId = setTimeout((/**
                 * @return {?}
                 */
                function () { return _this.close(); }), this.duration);
            }
        };
        /**
         * @private
         * @return {?}
         */
        Toast.prototype._clearTimeout = /**
         * @private
         * @return {?}
         */
        function () {
            if (this._timeoutId) {
                clearTimeout(this._timeoutId);
            }
        };
        return Toast;
    }());
    if (false) {
        /** @type {?} */
        Toast.prototype.autoClose;
        /** @type {?} */
        Toast.prototype.duration;
        /** @type {?} */
        Toast.prototype.text;
        /** @type {?} */
        Toast.prototype.caption;
        /** @type {?} */
        Toast.prototype.type;
        /** @type {?} */
        Toast.prototype.component;
        /**
         * @type {?}
         * @private
         */
        Toast.prototype._closeFunction;
        /**
         * @type {?}
         * @private
         */
        Toast.prototype._onClose;
        /**
         * @type {?}
         * @private
         */
        Toast.prototype._timeoutId;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: toast-container/toast-container.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var nestedTransition = animations.transition('* => *', [
        animations.query('@*', animations.animateChild(), { optional: true })
    ]);
    /** @type {?} */
    var shrinkInTransition = animations.transition('void => *', [
        animations.style({ height: 0, opacity: 0, 'margin-top': 0 }),
        animations.animate(200, animations.style({ height: '*', opacity: 1, 'margin-top': '1rem' }))
    ]);
    /** @type {?} */
    var shrinkOutTransition = animations.transition('* => void', [
        animations.style({ height: '!', opacity: 1, 'margin-top': '1rem' }),
        animations.animate(150, animations.style({ height: 0, opacity: 0, 'margin-top': 0 }))
    ]);
    /** @type {?} */
    var progressTransition = animations.transition('void => *', [
        animations.style({ width: 0, opacity: 0 }),
        animations.animate('{{duration}}', animations.style({ width: '100%', opacity: 1 }))
    ]);
    var ToastContainerComponent = /** @class */ (function () {
        function ToastContainerComponent(_changeDetector) {
            this._changeDetector = _changeDetector;
            this.tl = [];
            this.tc = [];
            this.tr = [];
            this.bl = [];
            this.bc = [];
            this.br = [];
        }
        /**
         * @param {?} config
         * @return {?}
         */
        ToastContainerComponent.prototype.add = /**
         * @param {?} config
         * @return {?}
         */
        function (config) {
            var _this = this;
            /** @type {?} */
            var collection = this._getCollection(config.position);
            if (config.preventDuplicates && this._isDuplicate(collection, config)) {
                return null;
            }
            /** @type {?} */
            var toast = new Toast(config, (/**
             * @param {?} t
             * @return {?}
             */
            function (t) { return _this._delete(collection, t); }));
            collection.push(toast);
            this._changeDetector.detectChanges();
            return toast;
        };
        /**
         * @private
         * @param {?} collection
         * @param {?} toast
         * @return {?}
         */
        ToastContainerComponent.prototype._delete = /**
         * @private
         * @param {?} collection
         * @param {?} toast
         * @return {?}
         */
        function (collection, toast) {
            collection.splice(collection.indexOf(toast), 1);
            this._changeDetector.detectChanges();
        };
        /**
         * @private
         * @param {?} collection
         * @param {?} config
         * @return {?}
         */
        ToastContainerComponent.prototype._isDuplicate = /**
         * @private
         * @param {?} collection
         * @param {?} config
         * @return {?}
         */
        function (collection, config) {
            return collection.some((/**
             * @param {?} t
             * @return {?}
             */
            function (t) {
                return t.type === config.type
                    && t.component === config.component
                    && t.caption === config.caption
                    && t.text === config.text;
            }));
        };
        /**
         * @private
         * @param {?} position
         * @return {?}
         */
        ToastContainerComponent.prototype._getCollection = /**
         * @private
         * @param {?} position
         * @return {?}
         */
        function (position) {
            switch (position) {
                case 'top-left':
                    return this.tl;
                case 'top-center':
                    return this.tc;
                case 'top-right':
                    return this.tr;
                case 'bottom-left':
                    return this.bl;
                case 'bottom-center':
                    return this.bc;
                default:
                    return this.br;
            }
        };
        ToastContainerComponent.decorators = [
            { type: core.Component, args: [{
                        template: "<ng-template #toastPanel let-toasts>\r\n  <div *ngFor=\"let toast of toasts\" [@nested]>\r\n    <div class=\"toast-card\" [ngClass]=\"toast.type || 'light'\" [@shrink]>\r\n      <ng-template toastContent [toast]=\"toast\"></ng-template>\r\n      <div *ngIf=\"toast.autoClose\"\r\n           class=\"lifetime-progress\"\r\n           role=\"progressbar\"\r\n           [@progress]=\"{value: '*', params: {duration: toast.duration + 'ms'}}\"></div>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n\r\n<div class=\"toast-overlay\">\r\n  <div class=\"toast-panel top-center\">\r\n    <ng-container *ngTemplateOutlet=\"toastPanel; context: {$implicit: tc}\"></ng-container>\r\n  </div>\r\n  <div class=\"toast-panel top-left\">\r\n    <ng-container *ngTemplateOutlet=\"toastPanel; context: {$implicit: tl}\"></ng-container>\r\n  </div>\r\n  <div class=\"toast-panel top-right\">\r\n    <ng-container *ngTemplateOutlet=\"toastPanel; context: {$implicit: tr}\"></ng-container>\r\n  </div>\r\n  <div class=\"toast-panel bottom-center\">\r\n    <ng-container *ngTemplateOutlet=\"toastPanel; context: {$implicit: bc}\"></ng-container>\r\n  </div>\r\n  <div class=\"toast-panel bottom-left\">\r\n    <ng-container *ngTemplateOutlet=\"toastPanel; context: {$implicit: bl}\"></ng-container>\r\n  </div>\r\n  <div class=\"toast-panel bottom-right\">\r\n    <ng-container *ngTemplateOutlet=\"toastPanel; context: {$implicit: br}\"></ng-container>\r\n  </div>\r\n</div>\r\n",
                        animations: [
                            animations.trigger('nested', [nestedTransition]),
                            animations.trigger('shrink', [shrinkInTransition, shrinkOutTransition]),
                            animations.trigger('progress', [progressTransition]),
                        ],
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        styles: [".toast-overlay{pointer-events:none;position:fixed;z-index:9000;left:0;top:0;width:100%;height:100%}@media (max-width:575px){.toast-overlay{display:flex;justify-content:flex-end;flex-direction:column}}.toast-panel{width:100%;font-size:1rem;line-height:1.5;font-family:-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,\"Helvetica Neue\",Arial,sans-serif}.toast-card{pointer-events:auto;overflow:hidden;background-clip:border-box;min-width:0;background-color:#f8f9fa;color:#212529;margin-top:1rem;box-shadow:rgba(0,0,0,.15) 0 .2rem 1.5rem .3rem}@media (min-width:576px){.toast-panel{position:absolute;max-width:20rem}.toast-panel.top-left{top:0;left:1rem}.toast-panel.top-center{top:0;left:50%;margin-left:-10rem}.toast-panel.top-right{top:0;right:1rem}.toast-panel.bottom-left{bottom:1rem;left:1rem}.toast-panel.bottom-center{bottom:1rem;left:50%;margin-left:-10rem}.toast-panel.bottom-right{bottom:1rem;right:1rem}.toast-card{border-radius:.15rem;box-shadow:rgba(0,0,0,.2) 0 .3rem .4rem -.2rem,rgba(0,0,0,.15) 0 .2rem 1.5rem .3rem}}.toast-card.danger,.toast-card.dark,.toast-card.info,.toast-card.primary,.toast-card.secondary,.toast-card.success{color:#f8f9fa}.toast-card.danger .lifetime-progress,.toast-card.dark .lifetime-progress,.toast-card.info .lifetime-progress,.toast-card.primary .lifetime-progress,.toast-card.secondary .lifetime-progress,.toast-card.success .lifetime-progress{background-color:#f8f9fa}.toast-card.light .lifetime-progress,.toast-card.primary,.toast-card.warning .lifetime-progress{background-color:#007bff}.toast-card.secondary{background-color:#868e96}.toast-card.success{background-color:#28a745}.toast-card.danger{background-color:#dc3545}.toast-card.warning{background-color:#ffc107}.toast-card.info{background-color:#17a2b8}.toast-card.light{background-color:#f8f9fa}.toast-card.dark{background-color:#343a40}.toast-card .lifetime-progress{display:flex;height:2px;width:0;border-radius:1px}"]
                    }] }
        ];
        /** @nocollapse */
        ToastContainerComponent.ctorParameters = function () { return [
            { type: core.ChangeDetectorRef }
        ]; };
        return ToastContainerComponent;
    }());
    if (false) {
        /** @type {?} */
        ToastContainerComponent.prototype.tl;
        /** @type {?} */
        ToastContainerComponent.prototype.tc;
        /** @type {?} */
        ToastContainerComponent.prototype.tr;
        /** @type {?} */
        ToastContainerComponent.prototype.bl;
        /** @type {?} */
        ToastContainerComponent.prototype.bc;
        /** @type {?} */
        ToastContainerComponent.prototype.br;
        /**
         * @type {?}
         * @private
         */
        ToastContainerComponent.prototype._changeDetector;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: toast-container.service.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var TOAST_CONTAINER_CLASS_NAME = 'toast-container';
    var ToastContainerService = /** @class */ (function () {
        function ToastContainerService(rendererFactory, _document, _factoryResolver, _appRef, _injector) {
            this._document = _document;
            this._factoryResolver = _factoryResolver;
            this._appRef = _appRef;
            this._injector = _injector;
            this._renderer = rendererFactory.createRenderer(null, null);
        }
        Object.defineProperty(ToastContainerService.prototype, "ref", {
            get: /**
             * @return {?}
             */
            function () {
                if (!this._componentRef) {
                    this._attach();
                }
                return this._componentRef;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ToastContainerService.prototype, "containerElement", {
            get: /**
             * @private
             * @return {?}
             */
            function () {
                if (!this._containerElement) {
                    this._containerElement = this._renderer.createElement('div');
                    this._renderer.addClass(this._containerElement, TOAST_CONTAINER_CLASS_NAME);
                    this._renderer.appendChild(this._document.body, this._containerElement);
                }
                return this._containerElement;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        ToastContainerService.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            this._detach();
            this._destroyContainer();
        };
        /**
         * @private
         * @return {?}
         */
        ToastContainerService.prototype._attach = /**
         * @private
         * @return {?}
         */
        function () {
            this._detach();
            /** @type {?} */
            var componentFactory = this._factoryResolver.resolveComponentFactory(ToastContainerComponent);
            this._componentRef = componentFactory.create(this._injector);
            /** @type {?} */
            var hostView = (/** @type {?} */ (this._componentRef.hostView));
            this._appRef.attachView(hostView);
            /** @type {?} */
            var rootNode = (/** @type {?} */ (hostView.rootNodes[0]));
            this._renderer.appendChild(this.containerElement, rootNode);
        };
        /**
         * @private
         * @return {?}
         */
        ToastContainerService.prototype._detach = /**
         * @private
         * @return {?}
         */
        function () {
            if (this._componentRef) {
                this._appRef.detachView(this._componentRef.hostView);
                this._componentRef.destroy();
                this._componentRef = null;
            }
        };
        /**
         * @private
         * @return {?}
         */
        ToastContainerService.prototype._destroyContainer = /**
         * @private
         * @return {?}
         */
        function () {
            if (this._containerElement && this._containerElement.parentNode) {
                this._renderer.removeChild(this._containerElement.parentNode, this._containerElement);
                this._containerElement = null;
            }
        };
        ToastContainerService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        ToastContainerService.ctorParameters = function () { return [
            { type: core.RendererFactory2 },
            { type: undefined, decorators: [{ type: core.Inject, args: [common.DOCUMENT,] }] },
            { type: core.ComponentFactoryResolver },
            { type: core.ApplicationRef },
            { type: core.Injector }
        ]; };
        return ToastContainerService;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        ToastContainerService.prototype._renderer;
        /**
         * @type {?}
         * @private
         */
        ToastContainerService.prototype._containerElement;
        /**
         * @type {?}
         * @private
         */
        ToastContainerService.prototype._componentRef;
        /**
         * @type {?}
         * @private
         */
        ToastContainerService.prototype._document;
        /**
         * @type {?}
         * @private
         */
        ToastContainerService.prototype._factoryResolver;
        /**
         * @type {?}
         * @private
         */
        ToastContainerService.prototype._appRef;
        /**
         * @type {?}
         * @private
         */
        ToastContainerService.prototype._injector;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: toast-notifications.config.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var TOAST_NOTIFICATIONS_CONFIG = new core.InjectionToken('ToastNotificationsConfig');
    /**
     * @record
     */
    function ToastNotificationsConfig() { }
    if (false) {
        /** @type {?|undefined} */
        ToastNotificationsConfig.prototype.position;
        /** @type {?|undefined} */
        ToastNotificationsConfig.prototype.autoClose;
        /** @type {?|undefined} */
        ToastNotificationsConfig.prototype.duration;
        /** @type {?|undefined} */
        ToastNotificationsConfig.prototype.type;
        /** @type {?|undefined} */
        ToastNotificationsConfig.prototype.component;
        /** @type {?|undefined} */
        ToastNotificationsConfig.prototype.preventDuplicates;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: toast-content/basic-toast-content.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var BasicToastContentComponent = /** @class */ (function () {
        function BasicToastContentComponent() {
        }
        BasicToastContentComponent.decorators = [
            { type: core.Component, args: [{
                        template: "<div class=\"close-button\" (click)=\"toast.close()\">&times;</div>\r\n<div class=\"content-body\">\r\n  <div *ngIf=\"toast.caption\" class=\"title\">{{toast.caption}}</div>\r\n  <div>{{toast.text}}</div>\r\n</div>\r\n",
                        styles: [":host{display:block;position:relative}.close-button{border:0;background:0 0;position:absolute;font-size:1.6rem;top:.5rem;right:.8rem;line-height:.6;font-weight:700;opacity:.3;color:inherit;cursor:pointer}@media (min-width:576px){.close-button{font-size:1rem;top:.3rem;right:.4rem}}.close-button:hover{opacity:1}.content-body{padding:.5rem 2.2rem .5rem .5rem;font-size:.85rem;min-height:1rem}@media (min-width:576px){.content-body{padding-right:1rem}}.content-body .title{font-weight:700}"]
                    }] }
        ];
        BasicToastContentComponent.propDecorators = {
            toast: [{ type: core.Input }]
        };
        return BasicToastContentComponent;
    }());
    if (false) {
        /** @type {?} */
        BasicToastContentComponent.prototype.toast;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: toaster.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var DEFAULT_CONFIG = {
        autoClose: true,
        duration: 8000,
        type: 'light',
        position: 'bottom-right',
        component: BasicToastContentComponent,
    };
    var Toaster = /** @class */ (function () {
        function Toaster(_config, _containerService) {
            this._config = _config;
            this._containerService = _containerService;
        }
        /**
         * @param {?} config
         * @param {?=} componentConfig
         * @return {?}
         */
        Toaster.prototype.open = /**
         * @param {?} config
         * @param {?=} componentConfig
         * @return {?}
         */
        function (config, componentConfig) {
            if (typeof config === 'string') {
                config = __assign({ text: (/** @type {?} */ (config)) }, componentConfig);
            }
            if (config instanceof core.Type) {
                config = __assign({}, componentConfig, { component: (/** @type {?} */ (config)) });
            }
            config = __assign({}, DEFAULT_CONFIG, this._config, config);
            return this._containerService.ref.instance.add(config);
        };
        Toaster.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        Toaster.ctorParameters = function () { return [
            { type: undefined, decorators: [{ type: core.Inject, args: [TOAST_NOTIFICATIONS_CONFIG,] }] },
            { type: ToastContainerService }
        ]; };
        return Toaster;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        Toaster.prototype._config;
        /**
         * @type {?}
         * @private
         */
        Toaster.prototype._containerService;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: core/toast-natifications.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ToastNotifications = /** @class */ (function () {
        function ToastNotifications(_toaster) {
            this._toaster = _toaster;
        }
        /**
         * @deprecated since version 1.0.0
         */
        /**
         * @deprecated since version 1.0.0
         * @param {?} toast
         * @return {?}
         */
        ToastNotifications.prototype.next = /**
         * @deprecated since version 1.0.0
         * @param {?} toast
         * @return {?}
         */
        function (toast) {
            /** @type {?} */
            var config = {
                text: toast.text,
                caption: toast.caption,
                type: toast.type,
                duration: toast.duration || toast.lifetime,
                component: null,
            };
            this._toaster.open(config);
        };
        ToastNotifications.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        ToastNotifications.ctorParameters = function () { return [
            { type: Toaster }
        ]; };
        return ToastNotifications;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        ToastNotifications.prototype._toaster;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: toast-content/toast-content.directive.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ToastContentDirective = /** @class */ (function () {
        function ToastContentDirective(_viewContainerRef, _componentFactoryResolver) {
            this._viewContainerRef = _viewContainerRef;
            this._componentFactoryResolver = _componentFactoryResolver;
        }
        /**
         * @return {?}
         */
        ToastContentDirective.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var componentFactory = this._componentFactoryResolver.resolveComponentFactory(this.toast.component);
            this._componentRef = this._viewContainerRef.createComponent(componentFactory);
            this._componentRef.instance.toast = this.toast;
        };
        /**
         * @return {?}
         */
        ToastContentDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            if (this._componentRef) {
                this._componentRef.destroy();
                this._componentRef = null;
            }
        };
        ToastContentDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[toastContent]',
                    },] }
        ];
        /** @nocollapse */
        ToastContentDirective.ctorParameters = function () { return [
            { type: core.ViewContainerRef },
            { type: core.ComponentFactoryResolver }
        ]; };
        ToastContentDirective.propDecorators = {
            toast: [{ type: core.Input }]
        };
        return ToastContentDirective;
    }());
    if (false) {
        /** @type {?} */
        ToastContentDirective.prototype.toast;
        /**
         * @type {?}
         * @private
         */
        ToastContentDirective.prototype._componentRef;
        /**
         * @type {?}
         * @private
         */
        ToastContentDirective.prototype._viewContainerRef;
        /**
         * @type {?}
         * @private
         */
        ToastContentDirective.prototype._componentFactoryResolver;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: toast-notifications.module.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ɵ0 = {};
    var ToastNotificationsModule = /** @class */ (function () {
        function ToastNotificationsModule(parentModule) {
            if (parentModule) {
                throw new Error('ToastNotificationsModule is already loaded. Import it in the root module only');
            }
        }
        /**
         * @param {?=} config
         * @return {?}
         */
        ToastNotificationsModule.forRoot = /**
         * @param {?=} config
         * @return {?}
         */
        function (config) {
            if (config === void 0) { config = {}; }
            return {
                ngModule: ToastNotificationsModule,
                providers: [
                    { provide: TOAST_NOTIFICATIONS_CONFIG, useValue: config },
                ]
            };
        };
        ToastNotificationsModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                        ],
                        declarations: [
                            ToastContainerComponent,
                            BasicToastContentComponent,
                            ToastContentDirective,
                        ],
                        entryComponents: [
                            ToastContainerComponent,
                            BasicToastContentComponent,
                        ],
                        providers: [
                            Toaster,
                            ToastContainerService,
                            { provide: TOAST_NOTIFICATIONS_CONFIG, useValue: ɵ0 },
                        ],
                    },] }
        ];
        /** @nocollapse */
        ToastNotificationsModule.ctorParameters = function () { return [
            { type: ToastNotificationsModule, decorators: [{ type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        return ToastNotificationsModule;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: core/toast-notification-core.module.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var defaultConfig = { lifetime: 8000 };
    var ToastNotificationCoreModule = /** @class */ (function () {
        function ToastNotificationCoreModule(parentModule) {
            if (parentModule) {
                throw new Error('ToastNotificationCoreModule is already loaded. Import it in the root module only');
            }
        }
        /**
         * @param {?=} config
         * @return {?}
         */
        ToastNotificationCoreModule.forRoot = /**
         * @param {?=} config
         * @return {?}
         */
        function (config) {
            if (config === void 0) { config = defaultConfig; }
            return {
                ngModule: ToastNotificationCoreModule,
                providers: [
                    { provide: TOAST_NOTIFICATIONS_CONFIG, useValue: { duration: config.duration || config.lifetime } }
                ]
            };
        };
        ToastNotificationCoreModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            ToastNotificationsModule,
                        ],
                        providers: [
                            ToastNotifications,
                        ],
                    },] }
        ];
        /** @nocollapse */
        ToastNotificationCoreModule.ctorParameters = function () { return [
            { type: ToastNotificationCoreModule, decorators: [{ type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        return ToastNotificationCoreModule;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: client/toast-notification-client.module.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ToastNotificationClientModule = /** @class */ (function () {
        function ToastNotificationClientModule() {
        }
        ToastNotificationClientModule.decorators = [
            { type: core.NgModule }
        ];
        return ToastNotificationClientModule;
    }());

    exports.TOAST_NOTIFICATIONS_CONFIG = TOAST_NOTIFICATIONS_CONFIG;
    exports.Toast = Toast;
    exports.ToastNotificationClientModule = ToastNotificationClientModule;
    exports.ToastNotificationCoreModule = ToastNotificationCoreModule;
    exports.ToastNotifications = ToastNotifications;
    exports.ToastNotificationsModule = ToastNotificationsModule;
    exports.Toaster = Toaster;
    exports.ɵa = ToastContainerComponent;
    exports.ɵb = BasicToastContentComponent;
    exports.ɵc = ToastContentDirective;
    exports.ɵd = ToastContainerService;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-toast-notifications.umd.js.map
