import { EventEmitter, QueryList, TemplateRef, OnInit } from '@angular/core';
import { DataTableColumn } from './column.component';
import { DataTableRow } from './row.component';
import { DataTableParams } from './types';
import { RowCallback } from './types';
import { DataTableTranslations } from './types';
import * as i0 from "@angular/core";
export declare class DataTable implements DataTableParams, OnInit {
    private _items;
    get items(): any[];
    set items(items: any[]);
    itemCount: number;
    columns: QueryList<DataTableColumn>;
    rows: QueryList<DataTableRow>;
    expandTemplate: TemplateRef<any>;
    headerTitle: string;
    header: boolean;
    pagination: boolean;
    indexColumn: boolean;
    indexColumnHeader: string;
    rowColors: RowCallback;
    rowTooltip: RowCallback;
    selectColumn: boolean;
    multiSelect: boolean;
    substituteRows: boolean;
    expandableRows: boolean;
    translations: DataTableTranslations;
    selectOnRowClick: boolean;
    autoReload: boolean;
    showReloading: boolean;
    indexColumnVisible: boolean;
    selectColumnVisible: boolean;
    expandColumnVisible: boolean;
    private _sortBy;
    private _sortAsc;
    private _offset;
    private _limit;
    get sortBy(): string;
    set sortBy(value: string);
    get sortAsc(): boolean;
    set sortAsc(value: boolean);
    get offset(): number;
    set offset(value: number);
    get limit(): number;
    set limit(value: number);
    get page(): number;
    set page(value: number);
    get lastPage(): number;
    sort(sortBy: string, asc: boolean): void;
    ngOnInit(): void;
    private _initDefaultValues;
    private _initDefaultClickEvents;
    _reloading: boolean;
    get reloading(): boolean;
    reload: EventEmitter<any>;
    reloadItems(): void;
    private _onReloadFinished;
    _displayParams: DataTableParams;
    get displayParams(): DataTableParams;
    _updateDisplayParams(): void;
    _scheduledReload: any;
    _triggerReload(): void;
    rowClick: EventEmitter<any>;
    rowDoubleClick: EventEmitter<any>;
    headerClick: EventEmitter<any>;
    cellClick: EventEmitter<any>;
    rowClicked(row: DataTableRow, event: any): void;
    rowDoubleClicked(row: DataTableRow, event: any): void;
    headerClicked(column: DataTableColumn, event: MouseEvent): void;
    private cellClicked;
    private _getRemoteParameters;
    private sortColumn;
    get columnCount(): number;
    getRowColor(item: any, index: number, row: DataTableRow): string;
    selectedRow: DataTableRow;
    selectedRows: DataTableRow[];
    private _selectAllCheckbox;
    get selectAllCheckbox(): boolean;
    set selectAllCheckbox(value: boolean);
    private _onSelectAllChanged;
    onRowSelectChanged(row: DataTableRow): void;
    get substituteItems(): unknown[];
    private _resizeInProgress;
    resizeColumnStart(event: MouseEvent, column: DataTableColumn, columnElement: HTMLElement): void;
    resizeLimit: number;
    private _isResizeInLimit;
    static ɵfac: i0.ɵɵFactoryDef<DataTable, never>;
    static ɵcmp: i0.ɵɵComponentDefWithMeta<DataTable, "data-table", never, { "items": "items"; "itemCount": "itemCount"; "headerTitle": "headerTitle"; "header": "header"; "pagination": "pagination"; "indexColumn": "indexColumn"; "indexColumnHeader": "indexColumnHeader"; "rowColors": "rowColors"; "rowTooltip": "rowTooltip"; "selectColumn": "selectColumn"; "multiSelect": "multiSelect"; "substituteRows": "substituteRows"; "expandableRows": "expandableRows"; "translations": "translations"; "selectOnRowClick": "selectOnRowClick"; "autoReload": "autoReload"; "showReloading": "showReloading"; "sortBy": "sortBy"; "sortAsc": "sortAsc"; "offset": "offset"; "limit": "limit"; "page": "page"; }, { "reload": "reload"; "rowClick": "rowClick"; "rowDoubleClick": "rowDoubleClick"; "headerClick": "headerClick"; "cellClick": "cellClick"; }, ["expandTemplate", "columns"], never>;
}
