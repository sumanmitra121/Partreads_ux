{"version":3,"sources":["../../../projects/ngx-editor/schema/marks.ts","../../../projects/ngx-editor/schema/nodes.ts","../../../projects/ngx-editor/schema/index.ts"],"names":["marks","link","attrs","href","title","default","target","inclusive","parseDOM","tag","getAttrs","dom","getAttribute","toDOM","node","_a","em","style","strong","fontWeight","value","test","code","u","s","text_color","color","mark","text_background_color","backgroundColor","nodes","doc","content","text","group","paragraph","align","textAlign","styles","toStyleString","blockquote","defining","horizontal_rule","heading","level","hard_break","inline","selectable","code_block","preserveWhitespace","image","src","alt","width","draggable","list_item","Object","assign","sl.listItem","ordered_list","sl.orderedList","bullet_list","sl.bulletList","schema","Schema"],"mappings":"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","sourcesContent":["import { DOMOutputSpec, Mark, MarkSpec } from 'prosemirror-model';\n\n// :: MarkSpec A link. Has `href` and `title` attributes. `title`\n// defaults to the empty string. Rendered and parsed as an `<a>`\n// element.\nconst link: MarkSpec = {\n  attrs: {\n    href: {},\n    title: { default: null },\n    target: { default: '_blank' }\n  },\n  inclusive: false,\n  parseDOM: [\n    {\n      tag: 'a[href]',\n      getAttrs(dom: HTMLElement): Record<string, any> {\n        return {\n          href: dom.getAttribute('href'),\n          title: dom.getAttribute('title'),\n          target: dom.getAttribute('target'),\n        };\n      }\n    }],\n  toDOM(node): DOMOutputSpec {\n    const { href, title, target } = node.attrs;\n    return ['a', { href, title, target }, 0];\n  }\n};\n\n// :: MarkSpec An emphasis mark. Rendered as an `<em>` element.\n// Has parse rules that also match `<i>` and `font-style: italic`.\nconst em: MarkSpec = {\n  parseDOM: [\n    { tag: 'i' },\n    { tag: 'em' },\n    { style: 'font-style=italic' }\n  ],\n  toDOM(): DOMOutputSpec {\n    return ['em', 0];\n  }\n};\n\n// :: MarkSpec A strong mark. Rendered as `<strong>`, parse rules\n// also match `<b>` and `font-weight: bold`.\nconst strong: MarkSpec = {\n  parseDOM: [\n    { tag: 'strong' },\n    // This works around a Google Docs misbehavior where\n    // pasted content will be inexplicably wrapped in `<b>`\n    // tags with a font-weight normal.\n    {\n      tag: 'b',\n      getAttrs: (dom: HTMLElement): Record<string, any> => {\n        return dom.style.fontWeight !== 'normal' && null;\n      },\n    },\n    {\n      style: 'font-weight',\n      getAttrs: (value: string): Record<string, any> => {\n        return /^(bold(er)?|[5-9]\\d{2,})$/.test(value) && null;\n      }\n    }\n  ],\n  toDOM(): DOMOutputSpec {\n    return ['strong', 0];\n  }\n};\n\n// :: MarkSpec Code font mark. Represented as a `<code>` element.\nconst code: MarkSpec = {\n  parseDOM: [\n    { tag: 'code' }\n  ],\n  toDOM(): DOMOutputSpec {\n    return ['code', 0];\n  }\n};\n\n// :: MarkSpec An underline mark. Rendered as an `<u>` element.\n// Has parse rules that also match `text-decoration: underline`.\nconst u: MarkSpec = {\n  parseDOM: [\n    { tag: 'u' },\n    { style: 'text-decoration=underline' }\n  ],\n  toDOM(): DOMOutputSpec {\n    return ['u', 0];\n  }\n};\n\n// :: MarkSpec An underline mark. Rendered as an `<s>` element.\n// Has parse rules that also match `strike`, `del` tag and css property `text-decoration: line-through`.\nconst s: MarkSpec = {\n  parseDOM: [\n    { tag: 's' },\n    { tag: 'strike' },\n    { style: 'text-decoration=line-through' }\n  ],\n  toDOM(): DOMOutputSpec {\n    return ['s', 0];\n  }\n};\n\nconst textColor: MarkSpec = {\n  attrs: {\n    color: {\n      default: null\n    },\n  },\n  parseDOM: [\n    {\n      style: 'color',\n      getAttrs: (value: string): Record<string, any> => {\n        return { color: value };\n      }\n    }\n  ],\n  toDOM(mark: Mark): DOMOutputSpec {\n    const { color } = mark.attrs;\n    return ['span', { style: `color:${color};` }, 0];\n  },\n};\n\nconst textBackgroundColor: MarkSpec = {\n  attrs: {\n    backgroundColor: {\n      default: null\n    },\n  },\n  parseDOM: [\n    {\n      style: 'background-color',\n      getAttrs: (value: string): Record<string, any> => {\n        return { backgroundColor: value };\n      }\n    }\n  ],\n  toDOM(mark: Mark): DOMOutputSpec {\n    const { backgroundColor } = mark.attrs;\n    return ['span', { style: `background-color:${backgroundColor};` }, 0];\n  },\n};\n\nconst marks = {\n  link,\n  em,\n  strong,\n  code,\n  u,\n  s,\n  text_color: textColor,\n  text_background_color: textBackgroundColor\n};\n\nexport default marks;\n","import { DOMOutputSpec, Node as ProseMirrorNode, NodeSpec } from 'prosemirror-model';\nimport * as sl from 'prosemirror-schema-list';\n\nimport { toStyleString } from 'ngx-editor/utils';\n\nconst doc: NodeSpec = {\n  content: 'block+'\n};\n\n// :: NodeSpec The text node.\nconst text: NodeSpec = {\n  group: 'inline'\n};\n\n// :: NodeSpec A plain paragraph textblock. Represented in the DOM\n// as a `<p>` element.\nconst paragraph: NodeSpec = {\n  content: 'inline*',\n  group: 'block',\n  attrs: {\n    align: {\n      default: null,\n    }\n  },\n  parseDOM: [\n    {\n      tag: 'p',\n      getAttrs(dom: HTMLElement): Record<string, any> {\n        const { textAlign } = dom.style;\n        const align = dom.getAttribute('align') || textAlign || null;\n\n        return {\n          align\n        };\n      }\n    }\n  ],\n  toDOM(node): DOMOutputSpec {\n    const { align } = node.attrs;\n\n    const styles: Partial<CSSStyleDeclaration> = {\n      textAlign: align !== 'left' ? align : null\n    };\n    const style = toStyleString(styles) || null;\n\n    return ['p', { style }, 0];\n  }\n};\n\n// :: NodeSpec A blockquote (`<blockquote>`) wrapping one or more blocks.\nconst blockquote: NodeSpec = {\n  content: 'block+',\n  group: 'block',\n  defining: true,\n  parseDOM: [{ tag: 'blockquote' }],\n  toDOM(): DOMOutputSpec {\n    return ['blockquote', 0];\n  }\n};\n\n// :: NodeSpec A horizontal rule (`<hr>`).\nconst horizontalRule: NodeSpec = {\n  group: 'block',\n  parseDOM: [{ tag: 'hr' }],\n  toDOM(): DOMOutputSpec {\n    return ['hr'];\n  }\n};\n\n// :: NodeSpec A heading textblock, with a `level` attribute that\n// should hold the number 1 to 6. Parsed and serialized as `<h1>` to\n// `<h6>` elements.\nconst heading: NodeSpec = {\n  attrs: {\n    level: {\n      default: 1\n    },\n    align: {\n      default: null,\n    }\n  },\n  content: 'inline*',\n  group: 'block',\n  defining: true,\n  parseDOM: [\n    {\n      tag: 'h1',\n      getAttrs(dom: HTMLElement): Record<string, any> {\n        const { textAlign } = dom.style;\n        const align = dom.getAttribute('align') || textAlign || null;\n\n        return {\n          level: 1,\n          align\n        };\n      }\n    },\n    {\n      tag: 'h2',\n      getAttrs(dom: HTMLElement): Record<string, any> {\n        const { textAlign } = dom.style;\n        const align = dom.getAttribute('align') || textAlign || null;\n\n        return {\n          level: 2,\n          align\n        };\n      }\n    },\n    {\n      tag: 'h3',\n      getAttrs(dom: HTMLElement): Record<string, any> {\n        const { textAlign } = dom.style;\n        const align = dom.getAttribute('align') || textAlign || null;\n\n        return {\n          level: 3,\n          align\n        };\n      }\n    },\n    {\n      tag: 'h4',\n      getAttrs(dom: HTMLElement): Record<string, any> {\n        const { textAlign } = dom.style;\n        const align = dom.getAttribute('align') || textAlign || null;\n\n        return {\n          level: 4,\n          align\n        };\n      }\n    },\n    {\n      tag: 'h5',\n      getAttrs(dom: HTMLElement): Record<string, any> {\n        const { textAlign } = dom.style;\n        const align = dom.getAttribute('align') || textAlign || null;\n\n        return {\n          level: 5,\n          align\n        };\n      }\n    },\n    {\n      tag: 'h6',\n      getAttrs(dom: HTMLElement): Record<string, any> {\n        const { textAlign } = dom.style;\n        const align = dom.getAttribute('align') || textAlign || null;\n\n        return {\n          level: 6,\n          align\n        };\n      }\n    },\n  ],\n  toDOM(node): DOMOutputSpec {\n    const { level, align } = node.attrs;\n\n    const styles: Partial<CSSStyleDeclaration> = {\n      textAlign: align !== 'left' ? align : null\n    };\n    const style = toStyleString(styles) || null;\n\n    return ['h' + level, { style }, 0];\n  }\n};\n\n// :: NodeSpec A code listing. Disallows marks or non-text inline\n// nodes by default. Represented as a `<pre>` element with a\n// `<code>` element inside of it.\nconst codeBlock: NodeSpec = {\n  content: 'text*',\n  marks: '',\n  group: 'block',\n  code: true,\n  defining: true,\n  parseDOM: [\n    {\n      tag: 'pre',\n      preserveWhitespace: 'full'\n    }\n  ],\n  toDOM(): DOMOutputSpec {\n    return ['pre', ['code', 0]];\n  }\n};\n\n// :: NodeSpec A hard line break, represented in the DOM as `<br>`.\nconst hardBreak: NodeSpec = {\n  inline: true,\n  group: 'inline',\n  selectable: false,\n  parseDOM: [{ tag: 'br' }],\n  toDOM(): DOMOutputSpec {\n    return ['br'];\n  }\n};\n\n// :: NodeSpec An inline image (`<img>`) node. Supports `src`,\n// `alt`, and `href` attributes. The latter two default to the empty\n// string.\nexport const image: NodeSpec = {\n  inline: true,\n  attrs: {\n    src: {},\n    alt: { default: null },\n    title: { default: null },\n    width: { default: null }\n  },\n  group: 'inline',\n  draggable: true,\n  parseDOM: [\n    {\n      tag: 'img[src]',\n      getAttrs(dom: HTMLElement): Record<string, any> {\n        return {\n          src: dom.getAttribute('src'),\n          title: dom.getAttribute('title'),\n          alt: dom.getAttribute('alt'),\n          width: dom.getAttribute('width')\n        };\n      }\n    }\n  ],\n  toDOM(node: ProseMirrorNode): DOMOutputSpec {\n    const { src, alt, title, width } = node.attrs;\n    return ['img', { src, alt, title, width }];\n  }\n};\n\nconst listItem = {\n  ...sl.listItem,\n  content: 'paragraph block*'\n};\n\nconst orderedList = {\n  ...sl.orderedList,\n  content: 'list_item+',\n  group: 'block'\n};\n\nconst bulletList = {\n  ...sl.bulletList,\n  content: 'list_item+',\n  group: 'block'\n};\n\nconst nodes = {\n  doc,\n  text,\n  paragraph,\n  blockquote,\n  horizontal_rule: horizontalRule,\n  heading,\n  hard_break: hardBreak,\n  code_block: codeBlock,\n  image,\n  list_item: listItem,\n  ordered_list: orderedList,\n  bullet_list: bulletList\n};\n\nexport default nodes;\n","import { Schema } from 'prosemirror-model';\n\nimport marks from './marks';\nimport nodes from './nodes';\n\nconst schema = new Schema({\n  marks,\n  nodes\n});\n\nexport default schema;\n"]}