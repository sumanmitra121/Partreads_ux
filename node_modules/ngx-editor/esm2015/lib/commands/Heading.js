import { setBlockType } from 'prosemirror-commands';
import { getSelectionNodes } from 'ngx-editor/helpers';
class Heading {
    constructor(level) {
        this.level = level;
    }
    apply() {
        return (state, dispatch) => {
            const { schema } = state;
            const type = schema.nodes.heading;
            if (!type) {
                return false;
            }
            return setBlockType(type)(state, dispatch);
        };
    }
    toggle() {
        return (state, dispatch) => {
            var _a;
            const { schema, selection, doc } = state;
            const type = schema.nodes.heading;
            if (!type) {
                return false;
            }
            const nodePos = selection.$from.before(1);
            const node = doc.nodeAt(nodePos);
            const attrs = (_a = node === null || node === void 0 ? void 0 : node.attrs) !== null && _a !== void 0 ? _a : {};
            if (this.isActive(state)) {
                return setBlockType(schema.nodes.paragraph, attrs)(state, dispatch);
            }
            return setBlockType(type, Object.assign(Object.assign({}, attrs), { level: this.level }))(state, dispatch);
        };
    }
    isActive(state) {
        const { schema } = state;
        const nodesInSelection = getSelectionNodes(state);
        const type = schema.nodes.heading;
        if (!type) {
            return false;
        }
        const supportedNodes = [
            type,
            schema.nodes.text,
            schema.nodes.blockquote
        ];
        // heading is a text node
        // don't mark as active when it has more nodes
        const nodes = nodesInSelection.filter(node => {
            return supportedNodes.includes(node.type);
        });
        const acitveNode = nodes.find((node) => {
            return node.attrs.level === this.level;
        });
        return Boolean(acitveNode);
    }
    canExecute(state) {
        return this.toggle()(state);
    }
}
export default Heading;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSGVhZGluZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1lZGl0b3Ivc3JjL2xpYi9jb21tYW5kcy9IZWFkaW5nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBVyxZQUFZLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUU3RCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUl2RCxNQUFNLE9BQU87SUFHWCxZQUFZLEtBQW9CO1FBQzlCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0lBQ3JCLENBQUM7SUFFRCxLQUFLO1FBQ0gsT0FBTyxDQUFDLEtBQWtCLEVBQUUsUUFBb0MsRUFBVyxFQUFFO1lBRTNFLE1BQU0sRUFBRSxNQUFNLEVBQUUsR0FBRyxLQUFLLENBQUM7WUFFekIsTUFBTSxJQUFJLEdBQWEsTUFBTSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUM7WUFDNUMsSUFBSSxDQUFDLElBQUksRUFBRTtnQkFDVCxPQUFPLEtBQUssQ0FBQzthQUNkO1lBRUQsT0FBTyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQzdDLENBQUMsQ0FBQztJQUNKLENBQUM7SUFFRCxNQUFNO1FBQ0osT0FBTyxDQUFDLEtBQWtCLEVBQUUsUUFBb0MsRUFBVyxFQUFFOztZQUUzRSxNQUFNLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUUsR0FBRyxLQUFLLENBQUM7WUFFekMsTUFBTSxJQUFJLEdBQWEsTUFBTSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUM7WUFDNUMsSUFBSSxDQUFDLElBQUksRUFBRTtnQkFDVCxPQUFPLEtBQUssQ0FBQzthQUNkO1lBRUQsTUFBTSxPQUFPLEdBQUcsU0FBUyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDMUMsTUFBTSxJQUFJLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUVqQyxNQUFNLEtBQUssU0FBRyxJQUFJLGFBQUosSUFBSSx1QkFBSixJQUFJLENBQUUsS0FBSyxtQ0FBSSxFQUFFLENBQUM7WUFFaEMsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFFO2dCQUN4QixPQUFPLFlBQVksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUMsQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUM7YUFDckU7WUFFRCxPQUFPLFlBQVksQ0FBQyxJQUFJLGtDQUFPLEtBQUssS0FBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUssSUFBRyxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQztRQUM5RSxDQUFDLENBQUM7SUFDSixDQUFDO0lBRUQsUUFBUSxDQUFDLEtBQWtCO1FBQ3pCLE1BQU0sRUFBRSxNQUFNLEVBQUUsR0FBRyxLQUFLLENBQUM7UUFDekIsTUFBTSxnQkFBZ0IsR0FBRyxpQkFBaUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUVsRCxNQUFNLElBQUksR0FBYSxNQUFNLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQztRQUM1QyxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ1QsT0FBTyxLQUFLLENBQUM7U0FDZDtRQUVELE1BQU0sY0FBYyxHQUFHO1lBQ3JCLElBQUk7WUFDSixNQUFNLENBQUMsS0FBSyxDQUFDLElBQUk7WUFDakIsTUFBTSxDQUFDLEtBQUssQ0FBQyxVQUFVO1NBQ3hCLENBQUM7UUFFRix5QkFBeUI7UUFDekIsOENBQThDO1FBQzlDLE1BQU0sS0FBSyxHQUFHLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUMzQyxPQUFPLGNBQWMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzVDLENBQUMsQ0FBQyxDQUFDO1FBRUgsTUFBTSxVQUFVLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQXFCLEVBQUUsRUFBRTtZQUN0RCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxLQUFLLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDekMsQ0FBQyxDQUFDLENBQUM7UUFFSCxPQUFPLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUM3QixDQUFDO0lBRUQsVUFBVSxDQUFDLEtBQWtCO1FBQzNCLE9BQU8sSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzlCLENBQUM7Q0FDRjtBQUVELGVBQWUsT0FBTyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTm9kZVR5cGUsIE5vZGUgYXMgUHJvc2VNaXJyb3JOb2RlIH0gZnJvbSAncHJvc2VtaXJyb3ItbW9kZWwnO1xuaW1wb3J0IHsgRWRpdG9yU3RhdGUsIFRyYW5zYWN0aW9uIH0gZnJvbSAncHJvc2VtaXJyb3Itc3RhdGUnO1xuaW1wb3J0IHsgQ29tbWFuZCwgc2V0QmxvY2tUeXBlIH0gZnJvbSAncHJvc2VtaXJyb3ItY29tbWFuZHMnO1xuXG5pbXBvcnQgeyBnZXRTZWxlY3Rpb25Ob2RlcyB9IGZyb20gJ25neC1lZGl0b3IvaGVscGVycyc7XG5cbmV4cG9ydCB0eXBlIEhlYWRpbmdMZXZlbHMgPSAxIHwgMiB8IDMgfCA0IHwgNSB8IDY7XG5cbmNsYXNzIEhlYWRpbmcge1xuICBsZXZlbDogbnVtYmVyO1xuXG4gIGNvbnN0cnVjdG9yKGxldmVsOiBIZWFkaW5nTGV2ZWxzKSB7XG4gICAgdGhpcy5sZXZlbCA9IGxldmVsO1xuICB9XG5cbiAgYXBwbHkoKTogQ29tbWFuZCB7XG4gICAgcmV0dXJuIChzdGF0ZTogRWRpdG9yU3RhdGUsIGRpc3BhdGNoPzogKHRyOiBUcmFuc2FjdGlvbikgPT4gdm9pZCk6IGJvb2xlYW4gPT4ge1xuXG4gICAgICBjb25zdCB7IHNjaGVtYSB9ID0gc3RhdGU7XG5cbiAgICAgIGNvbnN0IHR5cGU6IE5vZGVUeXBlID0gc2NoZW1hLm5vZGVzLmhlYWRpbmc7XG4gICAgICBpZiAoIXR5cGUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc2V0QmxvY2tUeXBlKHR5cGUpKHN0YXRlLCBkaXNwYXRjaCk7XG4gICAgfTtcbiAgfVxuXG4gIHRvZ2dsZSgpOiBDb21tYW5kIHtcbiAgICByZXR1cm4gKHN0YXRlOiBFZGl0b3JTdGF0ZSwgZGlzcGF0Y2g/OiAodHI6IFRyYW5zYWN0aW9uKSA9PiB2b2lkKTogYm9vbGVhbiA9PiB7XG5cbiAgICAgIGNvbnN0IHsgc2NoZW1hLCBzZWxlY3Rpb24sIGRvYyB9ID0gc3RhdGU7XG5cbiAgICAgIGNvbnN0IHR5cGU6IE5vZGVUeXBlID0gc2NoZW1hLm5vZGVzLmhlYWRpbmc7XG4gICAgICBpZiAoIXR5cGUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBub2RlUG9zID0gc2VsZWN0aW9uLiRmcm9tLmJlZm9yZSgxKTtcbiAgICAgIGNvbnN0IG5vZGUgPSBkb2Mubm9kZUF0KG5vZGVQb3MpO1xuXG4gICAgICBjb25zdCBhdHRycyA9IG5vZGU/LmF0dHJzID8/IHt9O1xuXG4gICAgICBpZiAodGhpcy5pc0FjdGl2ZShzdGF0ZSkpIHtcbiAgICAgICAgcmV0dXJuIHNldEJsb2NrVHlwZShzY2hlbWEubm9kZXMucGFyYWdyYXBoLCBhdHRycykoc3RhdGUsIGRpc3BhdGNoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNldEJsb2NrVHlwZSh0eXBlLCB7IC4uLmF0dHJzLCBsZXZlbDogdGhpcy5sZXZlbCB9KShzdGF0ZSwgZGlzcGF0Y2gpO1xuICAgIH07XG4gIH1cblxuICBpc0FjdGl2ZShzdGF0ZTogRWRpdG9yU3RhdGUpOiBib29sZWFuIHtcbiAgICBjb25zdCB7IHNjaGVtYSB9ID0gc3RhdGU7XG4gICAgY29uc3Qgbm9kZXNJblNlbGVjdGlvbiA9IGdldFNlbGVjdGlvbk5vZGVzKHN0YXRlKTtcblxuICAgIGNvbnN0IHR5cGU6IE5vZGVUeXBlID0gc2NoZW1hLm5vZGVzLmhlYWRpbmc7XG4gICAgaWYgKCF0eXBlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgY29uc3Qgc3VwcG9ydGVkTm9kZXMgPSBbXG4gICAgICB0eXBlLFxuICAgICAgc2NoZW1hLm5vZGVzLnRleHQsXG4gICAgICBzY2hlbWEubm9kZXMuYmxvY2txdW90ZVxuICAgIF07XG5cbiAgICAvLyBoZWFkaW5nIGlzIGEgdGV4dCBub2RlXG4gICAgLy8gZG9uJ3QgbWFyayBhcyBhY3RpdmUgd2hlbiBpdCBoYXMgbW9yZSBub2Rlc1xuICAgIGNvbnN0IG5vZGVzID0gbm9kZXNJblNlbGVjdGlvbi5maWx0ZXIobm9kZSA9PiB7XG4gICAgICByZXR1cm4gc3VwcG9ydGVkTm9kZXMuaW5jbHVkZXMobm9kZS50eXBlKTtcbiAgICB9KTtcblxuICAgIGNvbnN0IGFjaXR2ZU5vZGUgPSBub2Rlcy5maW5kKChub2RlOiBQcm9zZU1pcnJvck5vZGUpID0+IHtcbiAgICAgIHJldHVybiBub2RlLmF0dHJzLmxldmVsID09PSB0aGlzLmxldmVsO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIEJvb2xlYW4oYWNpdHZlTm9kZSk7XG4gIH1cblxuICBjYW5FeGVjdXRlKHN0YXRlOiBFZGl0b3JTdGF0ZSk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLnRvZ2dsZSgpKHN0YXRlKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBIZWFkaW5nO1xuIl19