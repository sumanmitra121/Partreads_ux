import { Plugin, PluginKey } from 'prosemirror-state';
import { DecorationSet, Decoration } from 'prosemirror-view';
const PLACEHOLDER_CLASSNAME = 'NgxEditor__Placeholder';
const placeholderPlugin = (text) => {
    return new Plugin({
        key: new PluginKey('placeholder'),
        state: {
            init() {
                return text !== null && text !== void 0 ? text : '';
            },
            apply(tr, previousVal) {
                var _a;
                const placeholder = (_a = tr.getMeta('UPDATE_PLACEHOLDER')) !== null && _a !== void 0 ? _a : previousVal;
                return placeholder;
            }
        },
        props: {
            decorations(state) {
                const { doc } = state;
                const { textContent, childCount } = doc;
                const placeholder = this.getState(state);
                if (!placeholder || childCount > 1) {
                    return DecorationSet.empty;
                }
                const decorations = [];
                const decorate = (node, pos) => {
                    var _a;
                    if (node.type.isBlock && node.childCount === 0 && textContent.length === 0) {
                        const placeholderNode = Decoration.node(pos, (pos + node.nodeSize), {
                            class: PLACEHOLDER_CLASSNAME,
                            'data-placeholder': placeholder,
                            'data-align': (_a = node.attrs.align) !== null && _a !== void 0 ? _a : null
                        });
                        decorations.push(placeholderNode);
                    }
                    return false;
                };
                doc.descendants(decorate);
                return DecorationSet.create(doc, decorations);
            }
        }
    });
};
const ɵ0 = placeholderPlugin;
export default placeholderPlugin;
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGxhY2Vob2xkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtZWRpdG9yL3NyYy9saWIvcGx1Z2lucy9wbGFjZWhvbGRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFlLFNBQVMsRUFBZSxNQUFNLG1CQUFtQixDQUFDO0FBQ2hGLE9BQU8sRUFBRSxhQUFhLEVBQUUsVUFBVSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFHN0QsTUFBTSxxQkFBcUIsR0FBRyx3QkFBd0IsQ0FBQztBQUV2RCxNQUFNLGlCQUFpQixHQUFHLENBQUMsSUFBYSxFQUFVLEVBQUU7SUFDbEQsT0FBTyxJQUFJLE1BQU0sQ0FBQztRQUNoQixHQUFHLEVBQUUsSUFBSSxTQUFTLENBQUMsYUFBYSxDQUFDO1FBQ2pDLEtBQUssRUFBRTtZQUNMLElBQUk7Z0JBQ0YsT0FBTyxJQUFJLGFBQUosSUFBSSxjQUFKLElBQUksR0FBSSxFQUFFLENBQUM7WUFDcEIsQ0FBQztZQUNELEtBQUssQ0FBQyxFQUFlLEVBQUUsV0FBbUI7O2dCQUN4QyxNQUFNLFdBQVcsU0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLG9CQUFvQixDQUFDLG1DQUFJLFdBQVcsQ0FBQztnQkFDcEUsT0FBTyxXQUFXLENBQUM7WUFDckIsQ0FBQztTQUNGO1FBQ0QsS0FBSyxFQUFFO1lBQ0wsV0FBVyxDQUFDLEtBQWtCO2dCQUM1QixNQUFNLEVBQUUsR0FBRyxFQUFFLEdBQUcsS0FBSyxDQUFDO2dCQUN0QixNQUFNLEVBQUUsV0FBVyxFQUFFLFVBQVUsRUFBRSxHQUFHLEdBQUcsQ0FBQztnQkFFeEMsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFFekMsSUFBSSxDQUFDLFdBQVcsSUFBSSxVQUFVLEdBQUcsQ0FBQyxFQUFFO29CQUNsQyxPQUFPLGFBQWEsQ0FBQyxLQUFLLENBQUM7aUJBQzVCO2dCQUVELE1BQU0sV0FBVyxHQUFpQixFQUFFLENBQUM7Z0JBRXJDLE1BQU0sUUFBUSxHQUFHLENBQUMsSUFBcUIsRUFBRSxHQUFXLEVBQUUsRUFBRTs7b0JBQ3RELElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDLFVBQVUsS0FBSyxDQUFDLElBQUksV0FBVyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7d0JBQzFFLE1BQU0sZUFBZSxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRTs0QkFDbEUsS0FBSyxFQUFFLHFCQUFxQjs0QkFDNUIsa0JBQWtCLEVBQUUsV0FBVzs0QkFDL0IsWUFBWSxRQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxtQ0FBSSxJQUFJO3lCQUN2QyxDQUFDLENBQUM7d0JBRUgsV0FBVyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztxQkFDbkM7b0JBRUQsT0FBTyxLQUFLLENBQUM7Z0JBQ2YsQ0FBQyxDQUFDO2dCQUVGLEdBQUcsQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUM7Z0JBQzFCLE9BQU8sYUFBYSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsV0FBVyxDQUFDLENBQUM7WUFDaEQsQ0FBQztTQUNGO0tBQ0YsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDOztBQUVGLGVBQWUsaUJBQWlCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQbHVnaW4sIEVkaXRvclN0YXRlLCBQbHVnaW5LZXksIFRyYW5zYWN0aW9uIH0gZnJvbSAncHJvc2VtaXJyb3Itc3RhdGUnO1xuaW1wb3J0IHsgRGVjb3JhdGlvblNldCwgRGVjb3JhdGlvbiB9IGZyb20gJ3Byb3NlbWlycm9yLXZpZXcnO1xuaW1wb3J0IHsgTm9kZSBhcyBQcm9zZU1pcnJvck5vZGUgfSBmcm9tICdwcm9zZW1pcnJvci1tb2RlbCc7XG5cbmNvbnN0IFBMQUNFSE9MREVSX0NMQVNTTkFNRSA9ICdOZ3hFZGl0b3JfX1BsYWNlaG9sZGVyJztcblxuY29uc3QgcGxhY2Vob2xkZXJQbHVnaW4gPSAodGV4dD86IHN0cmluZyk6IFBsdWdpbiA9PiB7XG4gIHJldHVybiBuZXcgUGx1Z2luKHtcbiAgICBrZXk6IG5ldyBQbHVnaW5LZXkoJ3BsYWNlaG9sZGVyJyksXG4gICAgc3RhdGU6IHtcbiAgICAgIGluaXQoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRleHQgPz8gJyc7XG4gICAgICB9LFxuICAgICAgYXBwbHkodHI6IFRyYW5zYWN0aW9uLCBwcmV2aW91c1ZhbDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgY29uc3QgcGxhY2Vob2xkZXIgPSB0ci5nZXRNZXRhKCdVUERBVEVfUExBQ0VIT0xERVInKSA/PyBwcmV2aW91c1ZhbDtcbiAgICAgICAgcmV0dXJuIHBsYWNlaG9sZGVyO1xuICAgICAgfVxuICAgIH0sXG4gICAgcHJvcHM6IHtcbiAgICAgIGRlY29yYXRpb25zKHN0YXRlOiBFZGl0b3JTdGF0ZSk6IERlY29yYXRpb25TZXQge1xuICAgICAgICBjb25zdCB7IGRvYyB9ID0gc3RhdGU7XG4gICAgICAgIGNvbnN0IHsgdGV4dENvbnRlbnQsIGNoaWxkQ291bnQgfSA9IGRvYztcblxuICAgICAgICBjb25zdCBwbGFjZWhvbGRlciA9IHRoaXMuZ2V0U3RhdGUoc3RhdGUpO1xuXG4gICAgICAgIGlmICghcGxhY2Vob2xkZXIgfHwgY2hpbGRDb3VudCA+IDEpIHtcbiAgICAgICAgICByZXR1cm4gRGVjb3JhdGlvblNldC5lbXB0eTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGRlY29yYXRpb25zOiBEZWNvcmF0aW9uW10gPSBbXTtcblxuICAgICAgICBjb25zdCBkZWNvcmF0ZSA9IChub2RlOiBQcm9zZU1pcnJvck5vZGUsIHBvczogbnVtYmVyKSA9PiB7XG4gICAgICAgICAgaWYgKG5vZGUudHlwZS5pc0Jsb2NrICYmIG5vZGUuY2hpbGRDb3VudCA9PT0gMCAmJiB0ZXh0Q29udGVudC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGNvbnN0IHBsYWNlaG9sZGVyTm9kZSA9IERlY29yYXRpb24ubm9kZShwb3MsIChwb3MgKyBub2RlLm5vZGVTaXplKSwge1xuICAgICAgICAgICAgICBjbGFzczogUExBQ0VIT0xERVJfQ0xBU1NOQU1FLFxuICAgICAgICAgICAgICAnZGF0YS1wbGFjZWhvbGRlcic6IHBsYWNlaG9sZGVyLFxuICAgICAgICAgICAgICAnZGF0YS1hbGlnbic6IG5vZGUuYXR0cnMuYWxpZ24gPz8gbnVsbFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGRlY29yYXRpb25zLnB1c2gocGxhY2Vob2xkZXJOb2RlKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH07XG5cbiAgICAgICAgZG9jLmRlc2NlbmRhbnRzKGRlY29yYXRlKTtcbiAgICAgICAgcmV0dXJuIERlY29yYXRpb25TZXQuY3JlYXRlKGRvYywgZGVjb3JhdGlvbnMpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBwbGFjZWhvbGRlclBsdWdpbjtcbiJdfQ==