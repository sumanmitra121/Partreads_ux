import { Fragment, Slice } from 'prosemirror-model';
import { Plugin, PluginKey } from 'prosemirror-state';
const HTTP_LINK_REGEX = /((https?:\/\/)?[\w-]+(\.[\w-]+)+\.?(:\d+)?(\/\S*)?)$/;
const linkify = (fragment) => {
    const linkified = [];
    fragment.forEach((child) => {
        if (child.isText) {
            const text = child.text;
            let pos = 0;
            const match = HTTP_LINK_REGEX.exec(text);
            if (match) {
                const start = match.index;
                const end = start + match[0].length;
                const link = child.type.schema.marks.link;
                if (start > 0) {
                    linkified.push(child.cut(pos, start));
                }
                const urlText = text.slice(start, end);
                linkified.push(child.cut(start, end).mark(link.create({ href: urlText }).addToSet(child.marks)));
                pos = end;
            }
            if (pos < text.length) {
                linkified.push(child.cut(pos));
            }
        }
        else {
            linkified.push(child.copy(linkify(child.content)));
        }
    });
    return Fragment.fromArray(linkified);
};
const ɵ0 = linkify;
const linkPlugin = () => {
    return new Plugin({
        key: new PluginKey('link'),
        props: {
            transformPasted: (slice) => {
                return new Slice(linkify(slice.content), slice.openStart, slice.openEnd);
            }
        }
    });
};
const ɵ1 = linkPlugin;
export default linkPlugin;
export { ɵ0, ɵ1 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGluay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1lZGl0b3Ivc3JjL2xpYi9wbHVnaW5zL2xpbmsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQTJCLE1BQU0sbUJBQW1CLENBQUM7QUFDN0UsT0FBTyxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUV0RCxNQUFNLGVBQWUsR0FBRyxzREFBc0QsQ0FBQztBQUUvRSxNQUFNLE9BQU8sR0FBRyxDQUFDLFFBQWtCLEVBQVksRUFBRTtJQUMvQyxNQUFNLFNBQVMsR0FBc0IsRUFBRSxDQUFDO0lBRXhDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxLQUFzQixFQUFFLEVBQUU7UUFDMUMsSUFBSSxLQUFLLENBQUMsTUFBTSxFQUFFO1lBQ2hCLE1BQU0sSUFBSSxHQUFHLEtBQUssQ0FBQyxJQUFjLENBQUM7WUFDbEMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDO1lBRVosTUFBTSxLQUFLLEdBQTRCLGVBQWUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFFbEUsSUFBSSxLQUFLLEVBQUU7Z0JBQ1QsTUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQztnQkFDMUIsTUFBTSxHQUFHLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUM7Z0JBQ3BDLE1BQU0sSUFBSSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUM7Z0JBRTFDLElBQUksS0FBSyxHQUFHLENBQUMsRUFBRTtvQkFDYixTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7aUJBQ3ZDO2dCQUVELE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDO2dCQUN2QyxTQUFTLENBQUMsSUFBSSxDQUNaLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUNqRixDQUFDO2dCQUNGLEdBQUcsR0FBRyxHQUFHLENBQUM7YUFDWDtZQUVELElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUU7Z0JBQ3JCLFNBQVMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO2FBQ2hDO1NBQ0Y7YUFBTTtZQUNMLFNBQVMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNwRDtJQUNILENBQUMsQ0FBQyxDQUFDO0lBRUgsT0FBTyxRQUFRLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ3ZDLENBQUMsQ0FBQzs7QUFFRixNQUFNLFVBQVUsR0FBRyxHQUFVLEVBQUU7SUFDN0IsT0FBTyxJQUFJLE1BQU0sQ0FBQztRQUNoQixHQUFHLEVBQUUsSUFBSSxTQUFTLENBQUMsTUFBTSxDQUFDO1FBQzFCLEtBQUssRUFBRTtZQUNMLGVBQWUsRUFBRSxDQUFDLEtBQVksRUFBRSxFQUFFO2dCQUNoQyxPQUFPLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEVBQUUsS0FBSyxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDM0UsQ0FBQztTQUNGO0tBQ0YsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDOztBQUVGLGVBQWUsVUFBVSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRnJhZ21lbnQsIFNsaWNlLCBOb2RlIGFzIFByb3NlTWlycm9yTm9kZSB9IGZyb20gJ3Byb3NlbWlycm9yLW1vZGVsJztcbmltcG9ydCB7IFBsdWdpbiwgUGx1Z2luS2V5IH0gZnJvbSAncHJvc2VtaXJyb3Itc3RhdGUnO1xuXG5jb25zdCBIVFRQX0xJTktfUkVHRVggPSAvKChodHRwcz86XFwvXFwvKT9bXFx3LV0rKFxcLltcXHctXSspK1xcLj8oOlxcZCspPyhcXC9cXFMqKT8pJC87XG5cbmNvbnN0IGxpbmtpZnkgPSAoZnJhZ21lbnQ6IEZyYWdtZW50KTogRnJhZ21lbnQgPT4ge1xuICBjb25zdCBsaW5raWZpZWQ6IFByb3NlTWlycm9yTm9kZVtdID0gW107XG5cbiAgZnJhZ21lbnQuZm9yRWFjaCgoY2hpbGQ6IFByb3NlTWlycm9yTm9kZSkgPT4ge1xuICAgIGlmIChjaGlsZC5pc1RleHQpIHtcbiAgICAgIGNvbnN0IHRleHQgPSBjaGlsZC50ZXh0IGFzIHN0cmluZztcbiAgICAgIGxldCBwb3MgPSAwO1xuXG4gICAgICBjb25zdCBtYXRjaDogUmVnRXhwTWF0Y2hBcnJheSB8IG51bGwgPSBIVFRQX0xJTktfUkVHRVguZXhlYyh0ZXh0KTtcblxuICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgIGNvbnN0IHN0YXJ0ID0gbWF0Y2guaW5kZXg7XG4gICAgICAgIGNvbnN0IGVuZCA9IHN0YXJ0ICsgbWF0Y2hbMF0ubGVuZ3RoO1xuICAgICAgICBjb25zdCBsaW5rID0gY2hpbGQudHlwZS5zY2hlbWEubWFya3MubGluaztcblxuICAgICAgICBpZiAoc3RhcnQgPiAwKSB7XG4gICAgICAgICAgbGlua2lmaWVkLnB1c2goY2hpbGQuY3V0KHBvcywgc3RhcnQpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHVybFRleHQgPSB0ZXh0LnNsaWNlKHN0YXJ0LCBlbmQpO1xuICAgICAgICBsaW5raWZpZWQucHVzaChcbiAgICAgICAgICBjaGlsZC5jdXQoc3RhcnQsIGVuZCkubWFyayhsaW5rLmNyZWF0ZSh7IGhyZWY6IHVybFRleHQgfSkuYWRkVG9TZXQoY2hpbGQubWFya3MpKVxuICAgICAgICApO1xuICAgICAgICBwb3MgPSBlbmQ7XG4gICAgICB9XG5cbiAgICAgIGlmIChwb3MgPCB0ZXh0Lmxlbmd0aCkge1xuICAgICAgICBsaW5raWZpZWQucHVzaChjaGlsZC5jdXQocG9zKSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGxpbmtpZmllZC5wdXNoKGNoaWxkLmNvcHkobGlua2lmeShjaGlsZC5jb250ZW50KSkpO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIEZyYWdtZW50LmZyb21BcnJheShsaW5raWZpZWQpO1xufTtcblxuY29uc3QgbGlua1BsdWdpbiA9ICgpOlBsdWdpbiA9PiB7XG4gIHJldHVybiBuZXcgUGx1Z2luKHtcbiAgICBrZXk6IG5ldyBQbHVnaW5LZXkoJ2xpbmsnKSxcbiAgICBwcm9wczoge1xuICAgICAgdHJhbnNmb3JtUGFzdGVkOiAoc2xpY2U6IFNsaWNlKSA9PiB7XG4gICAgICAgIHJldHVybiBuZXcgU2xpY2UobGlua2lmeShzbGljZS5jb250ZW50KSwgc2xpY2Uub3BlblN0YXJ0LCBzbGljZS5vcGVuRW5kKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgbGlua1BsdWdpbjtcbiJdfQ==