import { DOMSerializer, DOMParser } from 'prosemirror-model';
import defaultSchema from './schema';
export const emptyDoc = {
    type: 'doc',
    content: [
        {
            type: 'paragraph',
        }
    ],
};
// https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment
export const toHTML = (json, inputSchema) => {
    const schema = inputSchema !== null && inputSchema !== void 0 ? inputSchema : defaultSchema;
    const contentNode = schema.nodeFromJSON(json);
    const html = DOMSerializer.fromSchema(schema).serializeFragment(contentNode.content);
    const div = document.createElement('div');
    div.appendChild(html);
    return div.innerHTML;
};
export const toDoc = (html, inputSchema) => {
    const schema = inputSchema !== null && inputSchema !== void 0 ? inputSchema : defaultSchema;
    const el = document.createElement('div');
    el.innerHTML = html;
    return DOMParser.fromSchema(schema).parse(el).toJSON();
};
export const parseContent = (value, schema) => {
    if (!value) {
        return schema.nodeFromJSON(emptyDoc);
    }
    if (typeof value !== 'string') {
        return schema.nodeFromJSON(value);
    }
    const docJson = toDoc(value, schema);
    return schema.nodeFromJSON(docJson);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFyc2Vycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1lZGl0b3Ivc3JjL2xpYi9wYXJzZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxhQUFhLEVBQVUsU0FBUyxFQUEyQixNQUFNLG1CQUFtQixDQUFDO0FBRTlGLE9BQU8sYUFBYSxNQUFNLFVBQVUsQ0FBQztBQUVyQyxNQUFNLENBQUMsTUFBTSxRQUFRLEdBQUc7SUFDdEIsSUFBSSxFQUFFLEtBQUs7SUFDWCxPQUFPLEVBQUU7UUFDUDtZQUNFLElBQUksRUFBRSxXQUFXO1NBQ2xCO0tBQ0Y7Q0FDRixDQUFDO0FBRUYsb0VBQW9FO0FBQ3BFLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxDQUFDLElBQXlCLEVBQUUsV0FBb0IsRUFBVSxFQUFFO0lBQ2hGLE1BQU0sTUFBTSxHQUFHLFdBQVcsYUFBWCxXQUFXLGNBQVgsV0FBVyxHQUFJLGFBQWEsQ0FBQztJQUU1QyxNQUFNLFdBQVcsR0FBRyxNQUFNLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzlDLE1BQU0sSUFBSSxHQUFHLGFBQWEsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsaUJBQWlCLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBRXJGLE1BQU0sR0FBRyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDMUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN0QixPQUFPLEdBQUcsQ0FBQyxTQUFTLENBQUM7QUFDdkIsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sS0FBSyxHQUFHLENBQUMsSUFBWSxFQUFFLFdBQW9CLEVBQXVCLEVBQUU7SUFDL0UsTUFBTSxNQUFNLEdBQUcsV0FBVyxhQUFYLFdBQVcsY0FBWCxXQUFXLEdBQUksYUFBYSxDQUFDO0lBRTVDLE1BQU0sRUFBRSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDekMsRUFBRSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7SUFFcEIsT0FBTyxTQUFTLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztBQUN6RCxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxZQUFZLEdBQUcsQ0FBQyxLQUEwQyxFQUFFLE1BQWMsRUFBbUIsRUFBRTtJQUMxRyxJQUFJLENBQUMsS0FBSyxFQUFFO1FBQ1YsT0FBTyxNQUFNLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0tBQ3RDO0lBRUQsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLEVBQUU7UUFDN0IsT0FBTyxNQUFNLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQ25DO0lBRUQsTUFBTSxPQUFPLEdBQUcsS0FBSyxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztJQUNyQyxPQUFPLE1BQU0sQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDdEMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRE9NU2VyaWFsaXplciwgU2NoZW1hLCBET01QYXJzZXIsIE5vZGUgYXMgUHJvc2VNaXJyb3JOb2RlIH0gZnJvbSAncHJvc2VtaXJyb3ItbW9kZWwnO1xuXG5pbXBvcnQgZGVmYXVsdFNjaGVtYSBmcm9tICcuL3NjaGVtYSc7XG5cbmV4cG9ydCBjb25zdCBlbXB0eURvYyA9IHtcbiAgdHlwZTogJ2RvYycsXG4gIGNvbnRlbnQ6IFtcbiAgICB7XG4gICAgICB0eXBlOiAncGFyYWdyYXBoJyxcbiAgICB9XG4gIF0sXG59O1xuXG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvRG9jdW1lbnRGcmFnbWVudFxuZXhwb3J0IGNvbnN0IHRvSFRNTCA9IChqc29uOiBSZWNvcmQ8c3RyaW5nLCBhbnk+LCBpbnB1dFNjaGVtYT86IFNjaGVtYSk6IHN0cmluZyA9PiB7XG4gIGNvbnN0IHNjaGVtYSA9IGlucHV0U2NoZW1hID8/IGRlZmF1bHRTY2hlbWE7XG5cbiAgY29uc3QgY29udGVudE5vZGUgPSBzY2hlbWEubm9kZUZyb21KU09OKGpzb24pO1xuICBjb25zdCBodG1sID0gRE9NU2VyaWFsaXplci5mcm9tU2NoZW1hKHNjaGVtYSkuc2VyaWFsaXplRnJhZ21lbnQoY29udGVudE5vZGUuY29udGVudCk7XG5cbiAgY29uc3QgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIGRpdi5hcHBlbmRDaGlsZChodG1sKTtcbiAgcmV0dXJuIGRpdi5pbm5lckhUTUw7XG59O1xuXG5leHBvcnQgY29uc3QgdG9Eb2MgPSAoaHRtbDogc3RyaW5nLCBpbnB1dFNjaGVtYT86IFNjaGVtYSk6IFJlY29yZDxzdHJpbmcsIGFueT4gPT4ge1xuICBjb25zdCBzY2hlbWEgPSBpbnB1dFNjaGVtYSA/PyBkZWZhdWx0U2NoZW1hO1xuXG4gIGNvbnN0IGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIGVsLmlubmVySFRNTCA9IGh0bWw7XG5cbiAgcmV0dXJuIERPTVBhcnNlci5mcm9tU2NoZW1hKHNjaGVtYSkucGFyc2UoZWwpLnRvSlNPTigpO1xufTtcblxuZXhwb3J0IGNvbnN0IHBhcnNlQ29udGVudCA9ICh2YWx1ZTogc3RyaW5nIHwgUmVjb3JkPHN0cmluZywgYW55PiB8IG51bGwsIHNjaGVtYTogU2NoZW1hKTogUHJvc2VNaXJyb3JOb2RlID0+IHtcbiAgaWYgKCF2YWx1ZSkge1xuICAgIHJldHVybiBzY2hlbWEubm9kZUZyb21KU09OKGVtcHR5RG9jKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHNjaGVtYS5ub2RlRnJvbUpTT04odmFsdWUpO1xuICB9XG5cbiAgY29uc3QgZG9jSnNvbiA9IHRvRG9jKHZhbHVlLCBzY2hlbWEpO1xuICByZXR1cm4gc2NoZW1hLm5vZGVGcm9tSlNPTihkb2NKc29uKTtcbn07XG4iXX0=