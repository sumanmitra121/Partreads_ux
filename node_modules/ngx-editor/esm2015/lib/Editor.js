import { EditorState } from 'prosemirror-state';
import { EditorView } from 'prosemirror-view';
import { Subject } from 'rxjs';
import { isNil } from 'ngx-editor/utils';
import EditorCommands from './EditorCommands';
import defautlSchema from './schema';
import { parseContent } from './parsers';
import getDefaultPlugins from './defaultPlugins';
const DEFAULT_OPTIONS = {
    content: null,
    history: true,
    keyboardShortcuts: true,
    inputRules: true,
    schema: defautlSchema,
    plugins: [],
    nodeViews: {}
};
class Editor {
    constructor(options = DEFAULT_OPTIONS) {
        this.valueChangesSubject = new Subject();
        this.updateSubject = new Subject();
        this.options = Object.assign({}, DEFAULT_OPTIONS, options);
        this.createEditor();
    }
    get valueChanges() {
        return this.valueChangesSubject.asObservable();
    }
    get update() {
        return this.updateSubject.asObservable();
    }
    get schema() {
        return this.options.schema || defautlSchema;
    }
    get commands() {
        return new EditorCommands(this.view);
    }
    setContent(content) {
        if (isNil(content)) {
            return;
        }
        const { state } = this.view;
        const { tr, doc } = state;
        const newDoc = parseContent(content, this.schema);
        tr.replaceWith(0, state.doc.content.size, newDoc);
        // don't emit if both content is same
        if (doc.eq(tr.doc)) {
            return;
        }
        if (!tr.docChanged) {
            return;
        }
        this.view.dispatch(tr);
    }
    handleTransactions(tr) {
        const state = this.view.state.apply(tr);
        this.view.updateState(state);
        this.updateSubject.next(this.view);
        if (!tr.docChanged && !tr.getMeta('FORCE_EMIT')) {
            return;
        }
        const json = state.doc.toJSON();
        this.valueChangesSubject.next(json);
    }
    createEditor() {
        var _a;
        const { options } = this;
        const { content = null, nodeViews } = options;
        const { history = true, keyboardShortcuts = true, inputRules = true } = options;
        const schema = this.schema;
        const doc = parseContent(content, schema);
        const plugins = (_a = options.plugins) !== null && _a !== void 0 ? _a : [];
        const defaultPlugins = getDefaultPlugins(schema, {
            history,
            keyboardShortcuts,
            inputRules
        });
        this.view = new EditorView(null, {
            state: EditorState.create({
                doc,
                schema,
                plugins: [...defaultPlugins, ...plugins,],
            }),
            nodeViews,
            dispatchTransaction: this.handleTransactions.bind(this)
        });
    }
    registerPlugin(plugin) {
        const { state } = this.view;
        const plugins = [...state.plugins, plugin];
        const newState = state.reconfigure({ plugins });
        this.view.updateState(newState);
    }
    destroy() {
        this.view.destroy();
    }
}
export default Editor;
//# sourceMappingURL=data:application/json;base64,