import { Component, ElementRef, HostBinding, HostListener, Input } from '@angular/core';
import { NodeSelection } from 'prosemirror-state';
import { asyncScheduler, fromEvent } from 'rxjs';
import { throttleTime } from 'rxjs/operators';
import Icon from '../../../icons';
import { SanitizeHtmlPipe } from '../../../pipes/sanitize/sanitize-html.pipe';
export class FloatingMenuComponent {
    constructor(el, sanitizeHTML) {
        this.el = el;
        this.sanitizeHTML = sanitizeHTML;
        this.posLeft = 0;
        this.posTop = 0;
        this.showMenu = false;
        this.dragging = false;
        this.execulableItems = [];
        this.activeItems = [];
    }
    get display() {
        return {
            visibility: this.showMenu ? 'visible' : 'hidden',
            opacity: this.showMenu ? '1' : '0',
            top: this.posTop + 'px',
            left: this.posLeft + 'px',
        };
    }
    get view() {
        return this.editor.view;
    }
    onMouseDown(e) {
        if (this.el.nativeElement.contains(e.target)) {
            e.preventDefault();
            return;
        }
        this.dragging = true;
    }
    onKeyDown() {
        this.dragging = true;
        this.hide();
    }
    onMouseUp() {
        this.dragging = false;
        this.useUpdate();
    }
    onKeyUp() {
        this.dragging = false;
        this.useUpdate();
    }
    useUpdate() {
        if (!this.view) {
            return;
        }
        this.update(this.view);
    }
    getIcon(name) {
        const icon = Icon.getPath(name);
        return this.sanitizeHTML.transform(icon);
    }
    hide() {
        this.showMenu = false;
    }
    show() {
        this.showMenu = true;
    }
    calculateBubblePosition(view) {
        const { state: { selection } } = view;
        const { from } = selection;
        // the floating bubble itself
        const bubbleEl = this.el.nativeElement;
        const bubble = bubbleEl.getBoundingClientRect();
        // The box in which the tooltip is positioned, to use as base
        const box = bubbleEl.parentElement.getBoundingClientRect();
        const start = view.coordsAtPos(from);
        let left = start.left - box.left;
        const overflowsRight = (box.right < (start.left + bubble.width) ||
            bubble.right > box.right);
        if (overflowsRight) {
            left = box.width - bubble.width;
        }
        if (left < 0) {
            left = 0;
        }
        const bubbleHeight = bubble.height + parseInt(getComputedStyle(bubbleEl).marginBottom, 10);
        const top = (start.top - box.top) - bubbleHeight;
        return {
            left,
            top
        };
    }
    update(view) {
        const { state } = view;
        const { selection } = state;
        const { empty } = selection;
        if (selection instanceof NodeSelection) {
            if (selection.node.type.name === 'image') {
                this.hide();
                return;
            }
        }
        const hasFocus = this.view.hasFocus();
        if (!hasFocus || empty || this.dragging) {
            this.hide();
            return;
        }
        const { top, left } = this.calculateBubblePosition(this.view);
        this.posLeft = left;
        this.posTop = top;
        this.show();
    }
    ngOnInit() {
        if (!this.editor) {
            throw new Error('NgxEditor: Required editor instance');
        }
        this.updateSubscription = this.editor.update
            .subscribe((view) => {
            this.update(view);
        });
        this.resizeSubscription = fromEvent(window, 'resize').pipe(throttleTime(500, asyncScheduler, { leading: true, trailing: true })).subscribe(() => {
            this.useUpdate();
        });
    }
    ngOnDestroy() {
        this.updateSubscription.unsubscribe();
        this.resizeSubscription.unsubscribe();
    }
}
FloatingMenuComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-editor-floating-menu',
                template: "<div #ref>\n  <ng-content></ng-content>\n</div>\n<ng-container *ngIf=\"ref.children.length === 0\">\n  <ngx-bubble [editor]=\"editor\"></ngx-bubble>\n</ng-container>\n",
                styles: ["*,:after,:before{box-sizing:border-box}:host{position:absolute;z-index:20;margin-bottom:.35rem;visibility:hidden;opacity:0}"]
            },] }
];
FloatingMenuComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: SanitizeHtmlPipe }
];
FloatingMenuComponent.propDecorators = {
    display: [{ type: HostBinding, args: ['style',] }],
    editor: [{ type: Input }],
    onMouseDown: [{ type: HostListener, args: ['document:mousedown', ['$event'],] }],
    onKeyDown: [{ type: HostListener, args: ['document:keydown',] }],
    onMouseUp: [{ type: HostListener, args: ['document:mouseup',] }],
    onKeyUp: [{ type: HostListener, args: ['document:keyup',] }]
};
//# sourceMappingURL=data:application/json;base64,