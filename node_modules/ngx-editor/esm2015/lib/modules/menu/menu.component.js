import { Component, Input } from '@angular/core';
import { MenuService } from './menu.service';
const DEFAULT_TOOLBAR = [
    ['bold', 'italic'],
    ['code', 'blockquote'],
    ['underline', 'strike'],
    ['ordered_list', 'bullet_list'],
    [{ heading: ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'] }],
    ['link', 'image'],
    ['text_color', 'background_color'],
    ['align_left', 'align_center', 'align_right', 'align_justify'],
];
const DEFAULT_COLOR_PRESETS = [
    '#b60205',
    '#d93f0b',
    '#fbca04',
    '#0e8a16',
    '#006b75',
    '#1d76db',
    '#0052cc',
    '#5319e7',
    '#e99695',
    '#f9d0c4',
    '#fef2c0',
    '#c2e0c6',
    '#bfdadc',
    '#c5def5',
    '#bfd4f2',
    '#d4c5f9'
];
export class MenuComponent {
    constructor(menuService) {
        this.menuService = menuService;
        this.toolbar = DEFAULT_TOOLBAR;
        this.colorPresets = DEFAULT_COLOR_PRESETS;
        this.disabled = false;
        this.customMenuRef = null;
        this.dropdownPlacement = 'bottom';
        this.toggleCommands = [
            'bold', 'italic',
            'underline', 'strike',
            'code', 'blockquote',
            'ordered_list', 'bullet_list',
            'align_left', 'align_center', 'align_right', 'align_justify'
        ];
        this.iconContainerClass = ['NgxEditor__MenuItem', 'NgxEditor__MenuItem--Icon'];
        this.dropdownContainerClass = ['NgxEditor__Dropdown'];
        this.seperatorClass = ['NgxEditor__Seperator'];
    }
    get presets() {
        const col = 8;
        const colors = [];
        this.colorPresets.forEach((color, index) => {
            const row = Math.floor(index / col);
            if (!colors[row]) {
                colors.push([]);
            }
            colors[row].push(color);
        });
        return colors;
    }
    isDropDown(item) {
        var _a;
        if ((_a = item) === null || _a === void 0 ? void 0 : _a.heading) {
            return true;
        }
        return false;
    }
    getDropdownItems(item) {
        return item;
    }
    ngOnInit() {
        if (!this.editor) {
            throw new Error('NgxEditor: Required editor instance');
        }
        this.menuService.editor = this.editor;
    }
}
MenuComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-editor-menu',
                template: "<div class=\"NgxEditor__MenuBar\" [ngClass]=\"{'NgxEditor--Disabled': disabled, 'NgxEditor__MenuBar--Reverse': dropdownPlacement === 'top'}\">\n\n  <ng-container *ngFor=\"let toolbarItem of toolbar; let lastToolbarItem = last\">\n    <ng-container *ngFor=\"let item of toolbarItem; let lastItem = last\">\n\n      <!-- toggle icons -->\n      <ngx-toggle-command [toolbarItem]=\"item\" [class]=\"iconContainerClass\" *ngIf=\"toggleCommands.includes(item)\">\n      </ngx-toggle-command>\n\n      <!-- link -->\n      <ngx-link [class]=\"iconContainerClass\" *ngIf=\"item === 'link'\"></ngx-link>\n\n      <!-- image -->\n      <ngx-image [class]=\"iconContainerClass\" *ngIf=\"item === 'image'\">\n      </ngx-image>\n\n      <!-- dropdown -->\n      <ng-container *ngIf=\"isDropDown(item)\">\n        <ngx-dropdown *ngFor=\"let dropdownItem of getDropdownItems(item) | keyvalue\" [class]=\"dropdownContainerClass\"\n          [group]=\"dropdownItem.key\" [items]=\"dropdownItem.value\">\n        </ngx-dropdown>\n      </ng-container>\n\n      <!-- text color picker -->\n      <ngx-color-picker [class]=\"iconContainerClass\" *ngIf=\"item === 'text_color'\" type=\"text_color\"\n        [presets]=\"presets\">\n      </ngx-color-picker>\n      <!-- background color picker -->\n      <ngx-color-picker [class]=\"iconContainerClass\" *ngIf=\"item === 'background_color'\" type=\"background_color\"\n        [presets]=\"presets\">\n      </ngx-color-picker>\n\n      <!-- seperator -->\n      <div [class]=\"seperatorClass\" *ngIf=\"lastItem && !lastToolbarItem\"></div>\n    </ng-container>\n  </ng-container>\n\n  <!-- custom menu -->\n  <ng-container *ngIf=\"customMenuRef\">\n    <ng-container [ngTemplateOutlet]=\"customMenuRef\"></ng-container>\n  </ng-container>\n\n</div>\n",
                providers: [MenuService],
                styles: [""]
            },] }
];
MenuComponent.ctorParameters = () => [
    { type: MenuService }
];
MenuComponent.propDecorators = {
    toolbar: [{ type: Input }],
    colorPresets: [{ type: Input }],
    disabled: [{ type: Input }],
    editor: [{ type: Input }],
    customMenuRef: [{ type: Input }],
    dropdownPlacement: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVudS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtZWRpdG9yL3NyYy9saWIvbW9kdWxlcy9tZW51L21lbnUuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxTQUFTLEVBQUUsS0FBSyxFQUVqQixNQUFNLGVBQWUsQ0FBQztBQUl2QixPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFHN0MsTUFBTSxlQUFlLEdBQVk7SUFDL0IsQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDO0lBQ2xCLENBQUMsTUFBTSxFQUFFLFlBQVksQ0FBQztJQUN0QixDQUFDLFdBQVcsRUFBRSxRQUFRLENBQUM7SUFDdkIsQ0FBQyxjQUFjLEVBQUUsYUFBYSxDQUFDO0lBQy9CLENBQUMsRUFBRSxPQUFPLEVBQUUsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUM7SUFDbkQsQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDO0lBQ2pCLENBQUMsWUFBWSxFQUFFLGtCQUFrQixDQUFDO0lBQ2xDLENBQUMsWUFBWSxFQUFFLGNBQWMsRUFBRSxhQUFhLEVBQUUsZUFBZSxDQUFDO0NBQy9ELENBQUM7QUFFRixNQUFNLHFCQUFxQixHQUFHO0lBQzVCLFNBQVM7SUFDVCxTQUFTO0lBQ1QsU0FBUztJQUNULFNBQVM7SUFDVCxTQUFTO0lBQ1QsU0FBUztJQUNULFNBQVM7SUFDVCxTQUFTO0lBQ1QsU0FBUztJQUNULFNBQVM7SUFDVCxTQUFTO0lBQ1QsU0FBUztJQUNULFNBQVM7SUFDVCxTQUFTO0lBQ1QsU0FBUztJQUNULFNBQVM7Q0FDVixDQUFDO0FBU0YsTUFBTSxPQUFPLGFBQWE7SUFvQnhCLFlBQW9CLFdBQXdCO1FBQXhCLGdCQUFXLEdBQVgsV0FBVyxDQUFhO1FBbkJuQyxZQUFPLEdBQVksZUFBZSxDQUFDO1FBQ25DLGlCQUFZLEdBQWEscUJBQXFCLENBQUM7UUFDL0MsYUFBUSxHQUFHLEtBQUssQ0FBQztRQUVqQixrQkFBYSxHQUE0QixJQUFJLENBQUM7UUFDOUMsc0JBQWlCLEdBQXFCLFFBQVEsQ0FBQztRQUV4RCxtQkFBYyxHQUFVO1lBQ3RCLE1BQU0sRUFBRSxRQUFRO1lBQ2hCLFdBQVcsRUFBRSxRQUFRO1lBQ3JCLE1BQU0sRUFBRSxZQUFZO1lBQ3BCLGNBQWMsRUFBRSxhQUFhO1lBQzdCLFlBQVksRUFBRSxjQUFjLEVBQUUsYUFBYSxFQUFFLGVBQWU7U0FDN0QsQ0FBQztRQUVGLHVCQUFrQixHQUFHLENBQUMscUJBQXFCLEVBQUUsMkJBQTJCLENBQUMsQ0FBQztRQUMxRSwyQkFBc0IsR0FBRyxDQUFDLHFCQUFxQixDQUFDLENBQUM7UUFDakQsbUJBQWMsR0FBRyxDQUFDLHNCQUFzQixDQUFDLENBQUM7SUFFTSxDQUFDO0lBRWpELElBQUksT0FBTztRQUNULE1BQU0sR0FBRyxHQUFHLENBQUMsQ0FBQztRQUNkLE1BQU0sTUFBTSxHQUFlLEVBQUUsQ0FBQztRQUU5QixJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsRUFBRTtZQUN6QyxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxHQUFHLENBQUMsQ0FBQztZQUVwQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUNoQixNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO2FBQ2pCO1lBRUQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMxQixDQUFDLENBQUMsQ0FBQztRQUVILE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7SUFFRCxVQUFVLENBQUMsSUFBaUI7O1FBQzFCLFVBQUssSUFBd0IsMENBQUUsT0FBTyxFQUFFO1lBQ3RDLE9BQU8sSUFBSSxDQUFDO1NBQ2I7UUFFRCxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7SUFFRCxnQkFBZ0IsQ0FBQyxJQUFpQjtRQUNoQyxPQUFPLElBQXVCLENBQUM7SUFDakMsQ0FBQztJQUVELFFBQVE7UUFDTixJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNoQixNQUFNLElBQUksS0FBSyxDQUFDLHFDQUFxQyxDQUFDLENBQUM7U0FDeEQ7UUFFRCxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3hDLENBQUM7OztZQWhFRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGlCQUFpQjtnQkFDM0IsaXdEQUFvQztnQkFFcEMsU0FBUyxFQUFFLENBQUMsV0FBVyxDQUFDOzthQUN6Qjs7O1lBdENRLFdBQVc7OztzQkF5Q2pCLEtBQUs7MkJBQ0wsS0FBSzt1QkFDTCxLQUFLO3FCQUNMLEtBQUs7NEJBQ0wsS0FBSztnQ0FDTCxLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ29tcG9uZW50LCBJbnB1dCxcbiAgT25Jbml0LCBUZW1wbGF0ZVJlZlxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgVG9vbGJhciwgVG9vbGJhckl0ZW0sIFRvb2xiYXJEcm9wZG93biB9IGZyb20gJy4uLy4uL3R5cGVzJztcblxuaW1wb3J0IHsgTWVudVNlcnZpY2UgfSBmcm9tICcuL21lbnUuc2VydmljZSc7XG5pbXBvcnQgRWRpdG9yIGZyb20gJy4uLy4uL0VkaXRvcic7XG5cbmNvbnN0IERFRkFVTFRfVE9PTEJBUjogVG9vbGJhciA9IFtcbiAgWydib2xkJywgJ2l0YWxpYyddLFxuICBbJ2NvZGUnLCAnYmxvY2txdW90ZSddLFxuICBbJ3VuZGVybGluZScsICdzdHJpa2UnXSxcbiAgWydvcmRlcmVkX2xpc3QnLCAnYnVsbGV0X2xpc3QnXSxcbiAgW3sgaGVhZGluZzogWydoMScsICdoMicsICdoMycsICdoNCcsICdoNScsICdoNiddIH1dLFxuICBbJ2xpbmsnLCAnaW1hZ2UnXSxcbiAgWyd0ZXh0X2NvbG9yJywgJ2JhY2tncm91bmRfY29sb3InXSxcbiAgWydhbGlnbl9sZWZ0JywgJ2FsaWduX2NlbnRlcicsICdhbGlnbl9yaWdodCcsICdhbGlnbl9qdXN0aWZ5J10sXG5dO1xuXG5jb25zdCBERUZBVUxUX0NPTE9SX1BSRVNFVFMgPSBbXG4gICcjYjYwMjA1JyxcbiAgJyNkOTNmMGInLFxuICAnI2ZiY2EwNCcsXG4gICcjMGU4YTE2JyxcbiAgJyMwMDZiNzUnLFxuICAnIzFkNzZkYicsXG4gICcjMDA1MmNjJyxcbiAgJyM1MzE5ZTcnLFxuICAnI2U5OTY5NScsXG4gICcjZjlkMGM0JyxcbiAgJyNmZWYyYzAnLFxuICAnI2MyZTBjNicsXG4gICcjYmZkYWRjJyxcbiAgJyNjNWRlZjUnLFxuICAnI2JmZDRmMicsXG4gICcjZDRjNWY5J1xuXTtcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbmd4LWVkaXRvci1tZW51JyxcbiAgdGVtcGxhdGVVcmw6ICcuL21lbnUuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9tZW51LmNvbXBvbmVudC5zY3NzJ10sXG4gIHByb3ZpZGVyczogW01lbnVTZXJ2aWNlXVxufSlcblxuZXhwb3J0IGNsYXNzIE1lbnVDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICBASW5wdXQoKSB0b29sYmFyOiBUb29sYmFyID0gREVGQVVMVF9UT09MQkFSO1xuICBASW5wdXQoKSBjb2xvclByZXNldHM6IHN0cmluZ1tdID0gREVGQVVMVF9DT0xPUl9QUkVTRVRTO1xuICBASW5wdXQoKSBkaXNhYmxlZCA9IGZhbHNlO1xuICBASW5wdXQoKSBlZGl0b3I6IEVkaXRvcjtcbiAgQElucHV0KCkgY3VzdG9tTWVudVJlZjogVGVtcGxhdGVSZWY8YW55PiB8IG51bGwgPSBudWxsO1xuICBASW5wdXQoKSBkcm9wZG93blBsYWNlbWVudDogJ3RvcCcgfCAnYm90dG9tJyA9ICdib3R0b20nO1xuXG4gIHRvZ2dsZUNvbW1hbmRzOiBhbnlbXSA9IFtcbiAgICAnYm9sZCcsICdpdGFsaWMnLFxuICAgICd1bmRlcmxpbmUnLCAnc3RyaWtlJyxcbiAgICAnY29kZScsICdibG9ja3F1b3RlJyxcbiAgICAnb3JkZXJlZF9saXN0JywgJ2J1bGxldF9saXN0JyxcbiAgICAnYWxpZ25fbGVmdCcsICdhbGlnbl9jZW50ZXInLCAnYWxpZ25fcmlnaHQnLCAnYWxpZ25fanVzdGlmeSdcbiAgXTtcblxuICBpY29uQ29udGFpbmVyQ2xhc3MgPSBbJ05neEVkaXRvcl9fTWVudUl0ZW0nLCAnTmd4RWRpdG9yX19NZW51SXRlbS0tSWNvbiddO1xuICBkcm9wZG93bkNvbnRhaW5lckNsYXNzID0gWydOZ3hFZGl0b3JfX0Ryb3Bkb3duJ107XG4gIHNlcGVyYXRvckNsYXNzID0gWydOZ3hFZGl0b3JfX1NlcGVyYXRvciddO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgbWVudVNlcnZpY2U6IE1lbnVTZXJ2aWNlKSB7IH1cblxuICBnZXQgcHJlc2V0cygpOiBzdHJpbmdbXVtdIHtcbiAgICBjb25zdCBjb2wgPSA4O1xuICAgIGNvbnN0IGNvbG9yczogc3RyaW5nW11bXSA9IFtdO1xuXG4gICAgdGhpcy5jb2xvclByZXNldHMuZm9yRWFjaCgoY29sb3IsIGluZGV4KSA9PiB7XG4gICAgICBjb25zdCByb3cgPSBNYXRoLmZsb29yKGluZGV4IC8gY29sKTtcblxuICAgICAgaWYgKCFjb2xvcnNbcm93XSkge1xuICAgICAgICBjb2xvcnMucHVzaChbXSk7XG4gICAgICB9XG5cbiAgICAgIGNvbG9yc1tyb3ddLnB1c2goY29sb3IpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIGNvbG9ycztcbiAgfVxuXG4gIGlzRHJvcERvd24oaXRlbTogVG9vbGJhckl0ZW0pOiBib29sZWFuIHtcbiAgICBpZiAoKGl0ZW0gYXMgVG9vbGJhckRyb3Bkb3duKT8uaGVhZGluZykge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZ2V0RHJvcGRvd25JdGVtcyhpdGVtOiBUb29sYmFySXRlbSk6IFRvb2xiYXJEcm9wZG93biB7XG4gICAgcmV0dXJuIGl0ZW0gYXMgVG9vbGJhckRyb3Bkb3duO1xuICB9XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLmVkaXRvcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdOZ3hFZGl0b3I6IFJlcXVpcmVkIGVkaXRvciBpbnN0YW5jZScpO1xuICAgIH1cblxuICAgIHRoaXMubWVudVNlcnZpY2UuZWRpdG9yID0gdGhpcy5lZGl0b3I7XG4gIH1cbn1cbiJdfQ==