import { Component, Input, ViewChild } from '@angular/core';
export class NgImgMagnifierComponent {
    constructor() {
        this.thumbImage = '';
        this.fullImage = '';
        this.top = '2';
        this.right = '1';
        this.lensWidth = '150';
        this.lensHeight = '150';
        this.resultWidth = '35';
        this.resultHeight = '60';
        this.imgWidth = '300';
        this.imgHeight = '300';
    }
    ngOnInit() {
    }
    imageZoom() {
        this.showLensDiv();
        var img, lens, result, cx, cy;
        result = this.resultID.nativeElement;
        result.style.top = this.top + '%';
        result.style.right = this.right + '%';
        result.style.width = this.resultWidth + '%';
        result.style.height = this.resultHeight + '%';
        this.showZoom = true;
        img = this.imgID.nativeElement;
        lens = this.zoomDiv.nativeElement;
        if (img.width > (img.height * 2)) {
            lens.style.width = (img.width / 3) + "px";
            lens.style.height = (img.height / 1) + "px";
        }
        else if (img.height > (img.width * 2)) {
            lens.style.width = (img.width / 1) + "px";
            lens.style.height = (img.height / 3) + "px";
        }
        else {
            lens.style.width = this.lensWidth + "px";
            lens.style.height = this.lensHeight + "px";
        }
        lens.style.opacity = 1;
        cx = result.offsetWidth / lens.offsetWidth;
        cy = result.offsetHeight / lens.offsetHeight;
        result.style.backgroundImage = "url('" + this.fullImage + "')";
        result.style.backgroundSize = (img.width * cx) + "px " + (img.height * cy) + "px";
        lens.addEventListener("mousemove", moveLens);
        img.addEventListener("mousemove", moveLens);
        lens.addEventListener("touchmove", moveLens);
        img.addEventListener("touchmove", moveLens);
        function moveLens(e) {
            var pos, x, y;
            e.preventDefault();
            pos = getPointerPosition(e);
            x = pos.x - (lens.offsetWidth / 2);
            y = pos.y - (lens.offsetHeight / 2);
            if (x > img.width - lens.offsetWidth) {
                x = img.width - lens.offsetWidth;
            }
            if (x < 0) {
                x = 0;
            }
            if (y > img.height - lens.offsetHeight) {
                y = img.height - lens.offsetHeight;
            }
            if (y < 0) {
                y = 0;
            }
            lens.style.left = (x + 5) + "px";
            lens.style.top = (y + 5) + "px";
            result.style.backgroundPosition = "-" + (x * cx) + "px -" + (y * cy) + "px";
        }
        function getPointerPosition(e) {
            var a, x = 0, y = 0;
            e = e || window.event;
            a = img.getBoundingClientRect();
            x = e.pageX - a.left;
            y = e.pageY - a.top;
            x = x - window.pageXOffset;
            y = y - window.pageYOffset;
            return { x: x, y: y };
        }
    }
    showZoomWin() {
        this.showZoom = true;
    }
    hideZoomWin() {
        this.showZoom = false;
        this.zoomDiv.nativeElement.style.opacity = 0;
        this.zoomDiv.nativeElement.style.display = 'none';
    }
    showLensDiv() {
        this.zoomDiv.nativeElement.style.display = 'block';
    }
}
NgImgMagnifierComponent.decorators = [
    { type: Component, args: [{
                selector: 'ng-img-magnifier',
                template: `
    <div class="img-zoom-container ">
      <div class="outerImg " (mouseenter)="showZoomWin() " (mouseleave)="hideZoomWin() ">
          <img #myimage id="myimage" class="mainImg" src={{thumbImage}} width={{imgWidth}} style="vertical-align: middle !important;" height={{imgHeight}} (mousemove)="imageZoom();">
          <div #zoomDiv id="zoomDiv " class="img-zoom-lens "></div>
      </div>
    </div>
    <div *ngIf="showZoom ">
        <div #myresult id="myresult " class="img-zoom-result "></div>
    </div>`,
                styles: [`html,
    body {
        height: 100%;
    }`,
                    `body {
        margin: 0;
    }`,
                    `* {
        box-sizing: border-box;
    }`,
                    `.img-zoom-container {
        position: relative;
    }`,
                    `.img-zoom-lens {
        position: absolute;
        border: 1px solid #d4d4d4;
        // background-image: url('./assets/zoom-image.png');
        background-color: rgb(255, 255, 255, 0.2);
        background-repeat: repeat;
        background-size: contain;
        opacity: 0;
        cursor: zoom-in !important;
        display: none;
    }`,
                    `.img-zoom-result {
        background-color: none;
        background-repeat: no-repeat;
        transition: 0.3s;
        border-radius: 5px;
        position: absolute;
    }`,
                    `@media screen and (max-width: 800px) {
        .img-zoom-result {
            display: none;
        }
    }`,
                    `.show {
        opacity: 500;
    }`,
                    `.hide {
        opacity: 0;
    }`,
                    `.mainImg {
        vertical-align: middle !important;
    }`,
                    `.outerImg {
        width: 310px;
        height: auto;
        padding-left: 5px;
        padding-right: 5px;
        padding-top: 5px;
        padding-bottom: 5px;
    }`]
            },] }
];
NgImgMagnifierComponent.ctorParameters = () => [];
NgImgMagnifierComponent.propDecorators = {
    thumbImage: [{ type: Input }],
    fullImage: [{ type: Input }],
    top: [{ type: Input }],
    right: [{ type: Input }],
    lensWidth: [{ type: Input }],
    lensHeight: [{ type: Input }],
    resultWidth: [{ type: Input }],
    resultHeight: [{ type: Input }],
    imgWidth: [{ type: Input }],
    imgHeight: [{ type: Input }],
    resultID: [{ type: ViewChild, args: ['myresult',] }],
    imgID: [{ type: ViewChild, args: ['myimage',] }],
    zoomDiv: [{ type: ViewChild, args: ['zoomDiv',] }]
};
//# sourceMappingURL=data:application/json;base64,