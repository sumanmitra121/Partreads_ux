import { ApplicationRef, Component, ComponentFactoryResolver, Directive, ElementRef, HostListener, Input, NgModule, ReflectiveInjector } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule, NgControl, ReactiveFormsModule } from '@angular/forms';

var TooltipComponent = (function () {
    function TooltipComponent() {
        this.x = 0;
        this.y = 0;
        this.hidden = false;
    }
    return TooltipComponent;
}());
TooltipComponent.decorators = [
    { type: Component, args: [{
                selector: 'validation-tooltip',
                styles: [".validation-tooltip { z-index: 1500; position: fixed; white-space: nowrap; } .validation-tooltip .triangle { width: 0; height: 0; left: 20px; bottom: -1px; border-left: 10px solid transparent; border-right: 10px solid transparent; border-bottom: 10px solid #f2dede; position: relative; } .validation-tooltip .tooltip-body { color: #a94442; background-color: #f2dede; border-color: #ebccd1; padding: 15px; margin-bottom: 20px; border: 1px solid transparent; border-radius: 4px; } "],
                template: "<div class=\"validation-tooltip\" [style.visibility]=\"hidden? 'hidden' : null\" [style.left]=\"x + 'px'\" [style.top]=\"y + 'px'\"> <div class=\"triangle\"> </div> <div class=\"tooltip-body\"> {{message}} </div> </div>"
            },] },
];
/**
 * @nocollapse
 */
TooltipComponent.ctorParameters = function () { return []; };

var InvalidTooltipDirective = (function () {
    /**
     * @param {?} _elementRef
     * @param {?} _applicationRef
     * @param {?} _componentFactoryResolver
     * @param {?} _ngControl
     */
    function InvalidTooltipDirective(_elementRef, _applicationRef, _componentFactoryResolver, _ngControl) {
        this._elementRef = _elementRef;
        this._applicationRef = _applicationRef;
        this._componentFactoryResolver = _componentFactoryResolver;
        this._ngControl = _ngControl;
        /**
         * An array of InvalidTooltipErrorMap, contains what message to show for each error
         */
        this.errorMaps = {};
        /**
         * Set to true when the tooltip is showing
         */
        this._isTooltipShowing = false;
        /**
         * The value of the last error shown, used in order not to show the same error multiple times
         */
        this._oldError = '';
    }
    /**
     * @return {?}
     */
    InvalidTooltipDirective.prototype.ngOnInit = function () {
        var _this = this;
        this._ngControl.statusChanges.subscribe(function () {
            _this._showTooltipIfNeeded();
        });
    };
    /**
     * Decides whether the tooltip needs to be shown, and either shows it or removes it accordingly
     * @return {?}
     */
    InvalidTooltipDirective.prototype._showTooltipIfNeeded = function () {
        if (this._ngControl.dirty && this._ngControl.invalid || this._ngControl.touched && this._ngControl.invalid) {
            // We take only the first error
            var /** @type {?} */ newError = Object.keys(this._ngControl.errors)[0];
            if (this._oldError !== newError) {
                this._removeTooltip();
                this._oldError = newError;
                var /** @type {?} */ tooltip = this.errorMaps[this._oldError];
                if (tooltip) {
                    this._addTooltip(tooltip);
                }
            }
        }
        else {
            this._removeTooltip();
            this._oldError = '';
        }
    };
    /**
     * Creates the tooltip
     * @param {?} message
     * @return {?}
     */
    InvalidTooltipDirective.prototype._addTooltip = function (message) {
        this._componentRef =
            this._componentFactoryResolver.resolveComponentFactory(TooltipComponent)
                .create(ReflectiveInjector.resolveAndCreate([], this._applicationRef.components[0].injector));
        this._applicationRef.attachView(this._componentRef.hostView);
        document.querySelector('body').appendChild(this._componentRef.location.nativeElement);
        this._subscribeToScroll();
        this._adjustPosition();
        this._componentRef.instance.message = message;
        this._isTooltipShowing = true;
    };
    /**
     * Calculates the position of the tooltip and sets it accordingly
     * @return {?}
     */
    InvalidTooltipDirective.prototype._adjustPosition = function () {
        var /** @type {?} */ boundingRectangle = this._elementRef.nativeElement.getBoundingClientRect();
        var /** @type {?} */ left = boundingRectangle.left + 10;
        var /** @type {?} */ top = boundingRectangle.top + this._elementRef.nativeElement.clientHeight - 10;
        this._componentRef.instance.x = left;
        this._componentRef.instance.y = top;
    };
    /**
     * Decided whether to hide the tooltip temporarily because the element is hidden by something else
     * @return {?}
     */
    InvalidTooltipDirective.prototype._adjustHidden = function () {
        var /** @type {?} */ boundingRectangle = this._elementRef.nativeElement.getBoundingClientRect();
        var /** @type {?} */ left = boundingRectangle.left + 1;
        var /** @type {?} */ top = boundingRectangle.top + 1;
        var /** @type {?} */ topMost = document.elementFromPoint(left, top);
        // if the element is not the top most element, hide the tooltip
        this._componentRef.instance.hidden = topMost !== this._elementRef.nativeElement;
    };
    /**
     * Removes the tooltip
     * @return {?}
     */
    InvalidTooltipDirective.prototype._removeTooltip = function () {
        if (this._isTooltipShowing) {
            this._componentRef.destroy();
            this._unsubscribeFromScroll();
            this._isTooltipShowing = false;
        }
    };
    /**
     * Subscribes to scrolling event of parents
     * @return {?}
     */
    InvalidTooltipDirective.prototype._subscribeToScroll = function () {
        var _this = this;
        this._scrollListener = function () {
            _this._adjustPosition();
            _this._adjustHidden();
        };
        document.addEventListener('scroll', this._scrollListener, true);
    };
    /**
     * Unsubscribes to scrolling event of parents
     * @return {?}
     */
    InvalidTooltipDirective.prototype._unsubscribeFromScroll = function () {
        document.removeEventListener('scroll', this._scrollListener, true);
    };
    /**
     * When the host loses focus, it removes the tooltip
     * @return {?}
     */
    InvalidTooltipDirective.prototype.onBlur = function () {
        this._removeTooltip();
        this._oldError = '';
    };
    /**
     * When the host gains focus, it shows the tooltip if needed
     * @return {?}
     */
    InvalidTooltipDirective.prototype.onFocus = function () {
        this._showTooltipIfNeeded();
    };
    return InvalidTooltipDirective;
}());
InvalidTooltipDirective.decorators = [
    { type: Directive, args: [{
                selector: '[invalidTooltip]',
            },] },
];
/**
 * @nocollapse
 */
InvalidTooltipDirective.ctorParameters = function () { return [
    { type: ElementRef, },
    { type: ApplicationRef, },
    { type: ComponentFactoryResolver, },
    { type: NgControl, },
]; };
InvalidTooltipDirective.propDecorators = {
    'errorMaps': [{ type: Input, args: ['invalidTooltip',] },],
    'onBlur': [{ type: HostListener, args: ['blur',] },],
    'onFocus': [{ type: HostListener, args: ['focus',] },],
};

var InvalidTooltipModule = (function () {
    function InvalidTooltipModule() {
    }
    return InvalidTooltipModule;
}());
InvalidTooltipModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    FormsModule,
                    ReactiveFormsModule
                ],
                declarations: [
                    InvalidTooltipDirective,
                    TooltipComponent
                ],
                exports: [
                    InvalidTooltipDirective
                ],
                entryComponents: [
                    TooltipComponent
                ]
            },] },
];
/**
 * @nocollapse
 */
InvalidTooltipModule.ctorParameters = function () { return []; };

export { InvalidTooltipModule, InvalidTooltipDirective };
