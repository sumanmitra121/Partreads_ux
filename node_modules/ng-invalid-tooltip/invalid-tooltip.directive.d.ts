import { ApplicationRef, ComponentFactoryResolver, ElementRef, OnInit } from '@angular/core';
import { NgControl } from '@angular/forms';
export interface InvalidTooltipErrorMap {
    [error: string]: string;
}
export declare class InvalidTooltipDirective implements OnInit {
    private _elementRef;
    private _applicationRef;
    private _componentFactoryResolver;
    private _ngControl;
    /**
     * An array of InvalidTooltipErrorMap, contains what message to show for each error
     * @type {InvalidTooltipErrorMap[]}
     */
    errorMaps: InvalidTooltipErrorMap;
    /**
     * Set to true when the tooltip is showing
     * @type {boolean}
     * @private
     */
    private _isTooltipShowing;
    /**
     * The value of the last error shown, used in order not to show the same error multiple times
     * @type {string}
     * @private
     */
    private _oldError;
    /**
     * A reference to the tooltip component
     * @type {ComponentRef<TooltipComponent>}
     */
    private _componentRef;
    /**
     * A listener that listens to the scroll event in the parents and moves the tooltip
     */
    private _scrollListener;
    constructor(_elementRef: ElementRef, _applicationRef: ApplicationRef, _componentFactoryResolver: ComponentFactoryResolver, _ngControl: NgControl);
    ngOnInit(): void;
    /**
     * Decides whether the tooltip needs to be shown, and either shows it or removes it accordingly
     * @private
     */
    private _showTooltipIfNeeded();
    /**
     * Creates the tooltip
     * @param {string} message - The message to show in the tooltip
     * @private
     */
    private _addTooltip(message);
    /**
     * Calculates the position of the tooltip and sets it accordingly
     * @private
     */
    private _adjustPosition();
    /**
     * Decided whether to hide the tooltip temporarily because the element is hidden by something else
     * @private
     */
    private _adjustHidden();
    /**
     * Removes the tooltip
     * @private
     */
    private _removeTooltip();
    /**
     * Subscribes to scrolling event of parents
     * @private
     */
    private _subscribeToScroll();
    /**
     * Unsubscribes to scrolling event of parents
     * @private
     */
    private _unsubscribeFromScroll();
    /**
     * When the host loses focus, it removes the tooltip
     */
    onBlur(): void;
    /**
     * When the host gains focus, it shows the tooltip if needed
     */
    onFocus(): void;
}
