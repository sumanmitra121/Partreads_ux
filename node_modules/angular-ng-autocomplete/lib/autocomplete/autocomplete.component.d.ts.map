{"version":3,"file":"autocomplete.component.d.ts","sources":["autocomplete.component.d.ts"],"names":[],"mappingssourcesContent":["import { AfterViewInit, ElementRef, EventEmitter, OnChanges, OnInit, Renderer2, SimpleChanges, TemplateRef } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ControlValueAccessor } from '@angular/forms';\nexport declare class AutocompleteComponent implements OnInit, OnChanges, AfterViewInit, ControlValueAccessor {\n    private renderer;\n    searchInput: ElementRef;\n    filteredListElement: ElementRef;\n    historyListElement: ElementRef;\n    inputKeyUp$: Observable<any>;\n    inputKeyDown$: Observable<any>;\n    query: string;\n    filteredList: any[];\n    historyList: any[];\n    isHistoryListVisible: boolean;\n    elementRef: any;\n    selectedIdx: number;\n    toHighlight: string;\n    notFound: boolean;\n    isFocused: boolean;\n    isOpen: boolean;\n    isScrollToEnd: boolean;\n    overlay: boolean;\n    private manualOpen;\n    private manualClose;\n    /**\n     * Data of items list.\n     * It can be array of strings or array of objects.\n     */\n    data: any[];\n    searchKeyword: string;\n    placeholder: string;\n    heading: string;\n    initialValue: any;\n    /**\n     * History identifier of history list\n     * When valid history identifier is given, then component stores selected item to local storage of user's browser.\n     * If it is null then history is hidden.\n     * History list is visible if at least one history item is stored.\n     */\n    historyIdentifier: string;\n    /**\n     * Heading text of history list.\n     * If it is null then history heading is hidden.\n     */\n    historyHeading: string;\n    historyListMaxNumber: number;\n    notFoundText: string;\n    isLoading: boolean;\n    debounceTime: number;\n    disabled: boolean;\n    /**\n     * The minimum number of characters the user must type before a search is performed.\n     */\n    minQueryLength: number;\n    /**\n     * Focus first item in the list\n     */\n    focusFirst: boolean;\n    /**\n     * Custom filter function\n     */\n    customFilter: (items: any[], query: string) => any[];\n    /** Event that is emitted whenever an item from the list is selected. */\n    selected: EventEmitter<any>;\n    /** Event that is emitted whenever an input is changed. */\n    inputChanged: EventEmitter<any>;\n    /** Event that is emitted whenever an input is focused. */\n    readonly inputFocused: EventEmitter<void>;\n    /** Event that is emitted whenever an input is cleared. */\n    readonly inputCleared: EventEmitter<void>;\n    /** Event that is emitted when the autocomplete panel is opened. */\n    readonly opened: EventEmitter<void>;\n    /** Event that is emitted when the autocomplete panel is closed. */\n    readonly closed: EventEmitter<void>;\n    /** Event that is emitted when scrolled to the end of items. */\n    readonly scrolledToEnd: EventEmitter<void>;\n    itemTemplate: TemplateRef<any>;\n    notFoundTemplate: TemplateRef<any>;\n    customTemplate: TemplateRef<any>;\n    /**\n     * Propagates new value when model changes\n     */\n    propagateChange: any;\n    onTouched: any;\n    /**\n     * Writes a new value from the form model into the view,\n     * Updates model\n     */\n    writeValue(value?: any): void;\n    /**\n     * Registers a handler that is called when something in the view has changed\n     */\n    registerOnChange(fn: any): void;\n    /**\n     * Registers a handler specifically for when a control receives a touch event\n     */\n    registerOnTouched(fn: () => void): void;\n    /**\n     * Event that is called when the value of an input element is changed\n     */\n    onChange(event: any): void;\n    constructor(elementRef: ElementRef, renderer: Renderer2);\n    /**\n     * Event that is called when the control status changes to or from DISABLED\n     */\n    setDisabledState(isDisabled: boolean): void;\n    ngOnInit(): void;\n    ngAfterViewInit(): void;\n    /**\n     * Set initial value\n     * @param value\n     */\n    setInitialValue(value: any): void;\n    /**\n     * Update search results\n     */\n    ngOnChanges(changes: SimpleChanges): void;\n    /**\n     * Items change\n     */\n    handleItemsChange(): void;\n    /**\n     * Filter data\n     */\n    filterList(): void;\n    /**\n     * Default filter function, used unless customFilter is provided\n     */\n    defaultFilterFunction(): any[];\n    /**\n     * Check if item is a string in the list.\n     * @param item\n     */\n    isTypeString(item: any): boolean;\n    /**\n     * Select item in the list.\n     * @param item\n     */\n    select(item: any): void;\n    /**\n     * Document click\n     * @param e event\n     */\n    handleClick(e: any): void;\n    /**\n     * Handle body overlay\n     */\n    handleOverlay(): void;\n    /**\n     * Scroll items\n     */\n    handleScroll(): void;\n    /**\n     * Define panel state\n     */\n    setPanelState(event: any): void;\n    /**\n     * Manual controls\n     */\n    open(): void;\n    close(): void;\n    focus(): void;\n    clear(): void;\n    /**\n     * Remove search query\n     */\n    remove(e: any): void;\n    /**\n     * Initialize historyList search\n     */\n    initSearchHistory(): void;\n    handleOpen(): void;\n    handleClose(): void;\n    handleFocus(e: any): void;\n    scrollToEnd(): void;\n    /**\n     * Initialize keyboard events\n     */\n    initEventStream(): void;\n    /**\n     * Listen keyboard events\n     */\n    listenEventStream(): void;\n    /**\n     * on keyup == when input changed\n     * @param e event\n     */\n    onKeyUp(e: any): void;\n    /**\n     * Keyboard arrow top and arrow bottom\n     * @param e event\n     */\n    onFocusItem(e: any): void;\n    /**\n     * Scroll to focused item\n     * * @param index\n     */\n    scrollToFocusedItem(index: any): void;\n    /**\n     * Select item on enter click\n     */\n    onHandleEnter(): void;\n    /**\n     * Esc click\n     */\n    onEsc(): void;\n    /**\n     * Tab click\n     */\n    onTab(): void;\n    /**\n     * Delete click\n     */\n    onDelete(): void;\n    /**\n     * Select item to save in localStorage\n     * @param selected\n     */\n    saveHistory(selected: any): void;\n    /**\n     * Save item in localStorage\n     * @param selected\n     */\n    saveHistoryToLocalStorage(selected: any): void;\n    /**\n     * Remove item from localStorage\n     * @param index\n     * @param e event\n     */\n    removeHistoryItem(index: any, e: any): void;\n    /**\n     * Reset localStorage\n     * @param e event\n     */\n    resetHistoryList(e: any): void;\n}\n"]}