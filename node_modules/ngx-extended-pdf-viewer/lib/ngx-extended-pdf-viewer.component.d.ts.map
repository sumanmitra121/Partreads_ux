{"version":3,"file":"ngx-extended-pdf-viewer.component.d.ts","sources":["ngx-extended-pdf-viewer.component.d.ts"],"names":[],"mappingssourcesContent":["import { OnChanges, SimpleChanges, OnDestroy, EventEmitter, NgZone, TemplateRef, OnInit } from '@angular/core';\nimport { PagesLoadedEvent } from './events/pages-loaded-event';\nimport { PageRenderedEvent } from './events/page-rendered-event';\nimport { PdfDownloadedEvent } from './events/pdf-downloaded-event';\nimport { PdfLoadedEvent } from './events/pdf-loaded-event';\nimport { VerbosityLevel } from './options/verbosity-level';\nimport { FindState, FindResultMatchesCount } from './events/find-result';\nimport { PdfDummyComponentsComponent } from './pdf-dummy-components/pdf-dummy-components.component';\nimport { AfterViewInit, ElementRef } from '@angular/core';\nimport { PDFNotificationService } from './pdf-notification-service';\nimport { TextLayerRenderedEvent } from './events/textlayer-rendered';\nimport { Location } from '@angular/common';\nimport { PdfThumbnailDrawnEvent } from './events/pdf-thumbnail-drawn-event';\nimport { ScrollModeType } from './options/pdf-viewer';\nimport { ProgressBarEvent } from './events/progress-bar-event';\nexport interface FormDataType {\n    [fieldName: string]: string | string[];\n}\nexport declare class NgxExtendedPdfViewerComponent implements OnInit, AfterViewInit, OnChanges, OnDestroy {\n    private ngZone;\n    private platformId;\n    private notificationService;\n    private location;\n    private elementRef;\n    static ngxExtendedPdfViewerInitialized: boolean;\n    /**\n     * The dummy components are inserted automatically when the user customizes the toolbar\n     * without adding every original toolbar item. Without the dummy components, the\n     * initialization code of pdf.js crashes because it assume that every standard widget is there.\n     */\n    dummyComponents: PdfDummyComponentsComponent;\n    root: ElementRef;\n    private pinchOnMobileSupport;\n    customFindbarInputArea: TemplateRef<any>;\n    customToolbar: TemplateRef<any>;\n    customFindbar: TemplateRef<any>;\n    customFindbarButtons: TemplateRef<any> | undefined;\n    customSecondaryToolbar: TemplateRef<any>;\n    customSidebar: TemplateRef<any>;\n    customThumbnail: TemplateRef<any>;\n    customFreeFloatingBar: TemplateRef<any>;\n    formData: FormDataType;\n    formDataChange: EventEmitter<FormDataType>;\n    pageViewMode: 'single' | 'book' | 'multiple' | 'infinite-scroll';\n    progress: EventEmitter<ProgressBarEvent>;\n    private secondaryToolbarComponent;\n    private sidebarComponent;\n    private _src;\n    srcChange: EventEmitter<string>;\n    scrollMode: ScrollModeType | undefined;\n    scrollModeChange: EventEmitter<ScrollModeType>;\n    authorization: Object | undefined;\n    httpHeaders: Object | undefined;\n    contextMenuAllowed: boolean;\n    afterPrint: EventEmitter<void>;\n    beforePrint: EventEmitter<void>;\n    currentZoomFactor: EventEmitter<number>;\n    /** This field stores the previous zoom level if the page is enlarged with a double-tap or double-click */\n    private previousZoom;\n    enablePrint: boolean;\n    /**\n     * Number of milliseconds to wait between initializing the PDF viewer and loading the PDF file.\n     * Most users can let this parameter safely at it's default value of zero.\n     * Set this to 1000 or higher if you run into timing problems (typically caused by loading the locale files\n     * after the PDF files, so they are not available when the PDF viewer is initialized).\n     */\n    delayFirstView: number;\n    /** store the timeout id so it can be canceled if user leaves the page before the PDF is shown */\n    private initTimeout;\n    /** How many log messages should be printed?\n     * Legal values: VerbosityLevel.INFOS (= 5), VerbosityLevel.WARNINGS (= 1), VerbosityLevel.ERRORS (= 0) */\n    logLevel: VerbosityLevel;\n    enablePinchOnMobile: boolean;\n    /** Use the minified (minifiedJSLibraries=\"true\", which is the default) or the user-readable pdf.js library (minifiedJSLibraries=\"false\") */\n    minifiedJSLibraries: boolean;\n    primaryMenuVisible: boolean;\n    /** option to increase (or reduce) print resolution. Default is 150 (dpi). Sensible values\n     * are 300, 600, and 1200. Note the increase memory consumption, which may even result in a browser crash. */\n    printResolution: any;\n    rotation: 0 | 90 | 180 | 270;\n    rotationChange: EventEmitter<0 | 90 | 180 | 270>;\n    hasSignature: boolean;\n    src: string | ArrayBuffer | Blob | Uint8Array | URL | {\n        range: any;\n    };\n    base64Src: string;\n    /**\n     * The combination of height, minHeight, and autoHeight ensures the PDF height of the PDF viewer is calculated correctly when the height is a percentage.\n     * By default, many CSS frameworks make a div with 100% have a height or zero pixels. checkHeigth() fixes this.\n     */\n    private autoHeight;\n    minHeight: string | undefined;\n    private _height;\n    height: string;\n    /**\n     * If this flag is true, this components adds a link to the locale assets. The pdf viewer\n     * sees this link and uses it to load the locale files automatically.\n     * @param useBrowserLocale boolean\n     */\n    useBrowserLocale: boolean;\n    backgroundColor: string;\n    /** Allows the user to define the name of the file after clicking \"download\" */\n    filenameForDownload: string;\n    /** Allows the user to disable the keyboard bindings completely */\n    ignoreKeyboard: boolean;\n    /** Allows the user to disable a list of key bindings. */\n    ignoreKeys: Array<string>;\n    /** Allows the user to enable a list of key bindings explicitly. If this property is set, every other key binding is ignored. */\n    acceptKeys: Array<string>;\n    /** Allows the user to put the viewer's svg images into an arbitrary folder */\n    imageResourcesPath: string;\n    /** Allows the user to put their locale folder into an arbitrary folder */\n    localeFolderPath: string;\n    /** Override the default locale. This must be the complete locale name, such as \"es-ES\". The string is allowed to be all lowercase.\n     */\n    language: string | undefined;\n    /** By default, listening to the URL is deactivated because often the anchor tag is used for the Angular router */\n    listenToURL: boolean;\n    /** Navigate to a certain \"named destination\" */\n    nameddest: string | undefined;\n    /** allows you to pass a password to read password-protected files */\n    password: string | undefined;\n    _showSidebarButton: boolean;\n    viewerPositionTop: string;\n    /** pdf.js can show signatures, but fails to verify them. So they are switched off by default.\n     * Set \"[showUnverifiedSignatures]\"=\"true\" to display e-signatures nonetheless.\n     */\n    showUnverifiedSignatures: boolean;\n    startTabindex: number | undefined;\n    showSidebarButton: boolean;\n    sidebarVisible: boolean | undefined;\n    sidebarVisibleChange: EventEmitter<boolean>;\n    showFindButton: boolean | undefined;\n    showPagingButtons: boolean;\n    showZoomButtons: boolean;\n    showPresentationModeButton: boolean;\n    showOpenFileButton: boolean;\n    showPrintButton: boolean;\n    showDownloadButton: boolean;\n    showBookmarkButton: boolean;\n    theme: 'dark' | 'light' | 'custom';\n    showToolbar: boolean;\n    showSecondaryToolbarButton: boolean;\n    /** Set by the event (secondaryMenuIsEmpty) */\n    hideKebabMenuForSecondaryToolbar: boolean;\n    showRotateButton: boolean;\n    handTool: boolean;\n    handToolChange: EventEmitter<boolean>;\n    showHandToolButton: boolean;\n    showScrollingButton: boolean;\n    showSpreadButton: boolean;\n    showPropertiesButton: boolean;\n    showBorders: boolean;\n    spread: 'off' | 'even' | 'odd';\n    spreadChange: EventEmitter<\"off\" | \"even\" | \"odd\">;\n    thumbnailDrawn: EventEmitter<PdfThumbnailDrawnEvent>;\n    private _page;\n    page: number | undefined;\n    pageChange: EventEmitter<number>;\n    pageLabel: string | undefined;\n    pageLabelChange: EventEmitter<string>;\n    pagesLoaded: EventEmitter<PagesLoadedEvent>;\n    pageRendered: EventEmitter<PageRenderedEvent>;\n    pdfDownloaded: EventEmitter<PdfDownloadedEvent>;\n    pdfLoaded: EventEmitter<PdfLoadedEvent>;\n    pdfLoadingFailed: EventEmitter<Error>;\n    textLayer: boolean | undefined;\n    textLayerRendered: EventEmitter<TextLayerRenderedEvent>;\n    updateFindMatchesCount: EventEmitter<FindResultMatchesCount>;\n    updateFindState: EventEmitter<FindState>;\n    /** Legal values: undefined, 'auto', 'page-actual', 'page-fit', 'page-width', or '50' (or any other percentage) */\n    zoom: string | number | undefined;\n    zoomChange: EventEmitter<string | number>;\n    zoomLevels: (string | number)[];\n    maxZoom: number;\n    minZoom: number;\n    /** This attribute allows you to increase the size of the UI elements so you can use them on small mobile devices.\n     * This attribute is a string with a percent character at the end (e.g. \"150%\").\n     */\n    _mobileFriendlyZoom: string;\n    mobileFriendlyZoomScale: number;\n    toolbarMarginTop: string;\n    toolbarWidth: string;\n    toolbarWidthInPixels: number;\n    secondaryToolbarTop: string | undefined;\n    sidebarPositionTop: string | undefined;\n    findbarTop: string | undefined;\n    findbarLeft: string | undefined;\n    buttonValues: any;\n    /**\n    * This attributes allows you to increase the size of the UI elements so you can use them on small mobile devices.\n    * This attribute is a string with a percent character at the end (e.g. \"150%\").\n    */\n    mobileFriendlyZoom: string;\n    private shuttingDown;\n    calcViewerPositionTop(): void;\n    constructor(ngZone: NgZone, platformId: any, notificationService: PDFNotificationService, location: Location, elementRef: ElementRef);\n    private iOSVersionRequiresES5;\n    private needsES5;\n    private ngxBrowserSupportsNullSafeChaining;\n    private loadViewer;\n    ngOnInit(): void;\n    private loadPdfJs;\n    ngAfterViewInit(): void;\n    private assignTabindexes;\n    private showElementsRecursively;\n    private collectElementPositions;\n    private doInitPDFViewer;\n    /** Notifies every widget that implements onLibraryInit() that the PDF viewer objects are available */\n    private afterLibraryInit;\n    checkHeight(): void;\n    private calculateBorderMarging;\n    onSpreadChange(newSpread: 'off' | 'even' | 'odd'): void;\n    private activateTextlayerIfNecessary;\n    private overrideDefaultSettings;\n    private openPDF;\n    private removeScrollbarInInititeScrollMode;\n    openPDF2(): void;\n    private selectCursorTool;\n    ngOnDestroy(): void;\n    private isPrimaryMenuVisible;\n    ngOnChanges(changes: SimpleChanges): void;\n    private equals;\n    private setZoom;\n    onResize(): void;\n    onContextMenu(): boolean;\n    onSecondaryMenuIsEmpty(hideKebabButton: boolean): void;\n    fillFormFields(formData: FormDataType): void;\n    addFormFieldListeners(formData: FormDataType): void;\n    addMissingFormFields(formData: FormDataType): FormDataType;\n    private getSelectValue;\n    private setSelectValue;\n    private emitFormDataChange;\n    loadComplete(pdf: any): void;\n    zoomToPageWidth(event: MouseEvent): void;\n}\n"]}